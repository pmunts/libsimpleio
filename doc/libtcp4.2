.\" man page for Munts Technologies Linux Simple I/O Library
.\" IPv4 TCP module
.\"
.\" Copyright (C)2016, Philip Munts, President, Munts AM Corp.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"
.\" * Redistributions of source code must retain the above copyright notice,
.\"   this list of conditions and the following disclaimer.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.TH libtcp4 2 "12 October 2016" "version 1.0" "Linux Simple I/O Library"
.SH NAME
.B libtcp4
\-\- Linux Simple I/O Library: IPv4 TCP Module
.SH SYNOPSIS
.nf
.B #include <libtcp4.h>

.BI "typedef uint32_t " IPV4_ADDR ";"

.BI "typedef uint16_t " IPV4_PORT ";"

.BI "void TCP4_resolve(char *" name ", IPV4_ADDR *" addr ", int *" error ");"

.BI "void TCP4_connect(IPV4_ADDR " addr ", IPV4_PORT " port ", int *" fd ", int *" error ");"

.BI "void TCP4_accept(IPV4_ADDR " addr ", IPV4_PORT " port ", int *" fd ", int *" error ");"

.BI "void TCP4_server(IPV4_ADDR " addr ", IPV4_PORT " port ", int *" fd ", int *" error ");"

.BI "void TCP4_close(int32_t " fd ", int32_t *" error ");"

.BI "void TCP4_send(int32_t " fd ", void *" buf ", int32_t " bufsize ", int32_t *" count ", int32_t *" error ");"

.BI "void TCP4_receive(int32_t " fd ", void *" buf ", int32_t " bufsize ", int32_t *" count ", int32_t *" error ");"

.fi
Link with
.BR -lsimpleio .
.SH DESCRIPTION
.nh
All functions return either
.B 0
(upon success) or an
.B errno
value (upon failure) in
.IR *error .
.PP
.B TCP4_resolve()
attempts to resolve an IPv4 address string passed in
.IR *name
(containing a domain name, a local host name like 
.B localhost
or a dot-decimal notation address like
.BR 1.2.3.4 ).
Upon success, the 32-bit IPv4 address will be returned in
.IR *addr 
.PP
.B TCP4_connect()
attempts to connect to a IPv4 TCP server.  The 32-bit IPv4 address is passed in
.IR addr
and the 16-bit TCP port number is passed in
.IR port .
Upon successful connection, a stream file descriptor will be returned in
.IR *fd .
.PP
.B TCP4_accept()
waits for an incoming connection request from a IPv4 TCP client.  Either
.B INADDR_ANY
may be passed in
.IR addr
to bind to (i.e. listen on) all network interfaces, or the 32-bit
IPV4 address of a particular network interface may be passed to bind
to only that interface.  The 16-bit TCP port number is passed in
.IR port . 
Upon successful connection, a stream file descriptor will be returned in
.IR *fd .
.PP
.B TCP4_server()
operates like
.B TCP4_accept()
except that upon successful connection, the original server process forks
to create a new and separate connection handler process.  The
server process continues to listen for more connection requests,
without returning from
.B TCP4_server(),
while in the new connection handler process,
.B TCP4_server()
does return, with a stream file descriptor for the new connection returned in
.IR *fd .
.PP
.B TCP4_close()
closes a previously opened IPv4 TCP stream.
The stream file descriptor is passed in
.IR fd .
.PP
.B TCP4_send()
sends data to a IPv4 TCP stream.
The stream file descriptor is passed in
.IR fd .
The transmit buffer address is passed in
.IR buf " and"
its size is passed in
.IR bufsize .
Upon success, the number of bytes actually sent will be returned in
.IR *count .
.PP
.B TCP4_receive()
receives data from a IPv4 TCP stream.
The stream file descriptor is passed in
.IR fd .
The receive buffer address is passed in
.IR buf " and"
its size is passed in
.IR bufsize .
Upon success, the number of bytes actually received will be returned in
.IR *count .
.SH SEE ALSO
.BR libsimpleio "(2), " libevent "(2), " libgpio "(2), " libhidraw "(2), " libi2c "(2), "
.br
.BR liblinux "(2), " liblinx "(2), " libserial "(2), " libspi "(2), " libstream "(2)" 
.SH AUTHOR
Philip Munts, President, Munts AM Corp dba Munts Technologies
