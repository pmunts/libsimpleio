.\" man page for Munts Technologies Linux Simple I/O Library
.\"
.\" Copyright (C)2016-2017, Philip Munts, President, Munts AM Corp.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"
.\" * Redistributions of source code must retain the above copyright notice,
.\"   this list of conditions and the following disclaimer.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.TH libhidraw 2 "11 April 2017" "version 1.0" "Linux Simple I/O Library"
.SH NAME
.B libhidraw
\-\- Linux Simple I/O Library: Raw HID Module
.SH SYNOPSIS
.nf
.B #include <libhidraw.h>

.BI "void HIDRAW_find(int32_t " VID ", int32_t " PID ", char *" name ", int32_t " size ","
.BI "  int32_t *" error ");"

.BI "void HIDRAW_open(const char *" name ", int32_t *" fd ", int32_t *" error ");"

.BI "void HIDRAW_close(int32_t " fd ", int32_t *" error ");"

.BI "void HIDRAW_get_name(int32_t " fd ", char *" name ", int32_t " size ",
.BI "  int32_t *" error ");"

.BI "void HIDRAW_get_info(int32_t " fd ", int32_t *" bustype ", int32_t *" vendor ","
.BI "  int32_t *" product ", int32_t *" error ");"

.BI "void HIDRAW_send(int32_t " fd ", void *" buf ", int32_t " bufsize ","
.BI "  int32_t *" count ", int32_t *" error ");"

.BI "void HIDRAW_receive(int32_t " fd ", void *" buf ", int32_t " bufsize ","
.BI "  int32_t *" count ", int32_t *" error ");"

.fi
Link with
.BR -lsimpleio .
.SH DESCRIPTION
.nh
All functions return either
.B 0
(upon success) or an
.B errno
value (upon failure) in
.IR *error .
.PP
.BR HIDRAW_find() " finds the device name (" /dev/hidrawN ")"
that matches the specified vendor and product ID numbers.  The vendor and product
ID numbers must be passed in the
.IR VID " and " PID
parameters. Upon success, the device name is returned in the
.IR name
parameter.
.PP
.BR HIDRAW_open() " opens a raw HID device.  The device name (" /dev/hidrawN ")"
must be passed in the
.IR name
parameter. Upon success, a file descriptor for the
raw HID device is returned in
.IR *fd .
.PP
.B HIDRAW_close()
closes a previously opened raw HID device.
The HID device file descriptor is passed in
.IR fd .
.PP
.B HIDRAW_get_name()
fetches an information string from the raw HID device.  The destination buffer address
must be passed in
.I *name
and the destination buffer size must be passed in
.IR size .
.PP
.B HIDRAW_get_info()
fetches the bus type, vendor ID and product ID from the raw HID device. The bus
type is returned in
.IR *bustype ,
and may be
.BR BUS_USB ,
.BR BUS_HIL ,
.BR BUS_BLUETOOTH " or"
.BR BUS_VIRTUAL .
These values are defined in
.BR /usr/include/linux/input.h .
The vendor and product ID's are returned in
.IR *vendor  " and " *product " respectively."
.PP
.B HIDRAW_send()
sends a message (also known as a HID report) to the raw HID device.
The HID device file descriptor is passed in
.IR fd .
The address of the message buffer is passed in
.IR buf
and the size of the message buffer is passed in
.IR bufsize .
The message size will typically be either 64 or 65 bytes, depending on whether the
particular raw HID device uses the first byte for the report number.  Upon success,
the number of bytes actually sent will be returned in
.IR *count .
.PP
.B HIDRAW_receive()
receives a message (i.e. a HID report) from the raw HID device.
The HID device file descriptor is passed in
.IR fd .
The address of the message buffer is passed in
.IR buf
and the size of the message buffer is passed in
.IR bufsize .
The message size will typically be either 64 or 65 bytes, depending on whether the
particular raw HID device uses the first byte for the report number.  Upon success,
the number of bytes actually received will be returned in
.IR *count .
.SH SEE ALSO
.BR libsimpleio "(2), " libevent "(2), " libgpio "(2), " libi2c "(2), " liblinux "(2),"
.br
.BR liblinx "(2), " libpwm "(2), " libserial "(2), " libspi "(2), " libstream "(2),"
.br
.BR libtcp4 "(2), " libwatchdog "(2)"
.SH AUTHOR
Philip Munts, President, Munts AM Corp dba Munts Technologies
