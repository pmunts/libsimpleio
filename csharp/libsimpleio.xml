<?xml version="1.0"?>
<doc>
    <assembly>
        <name>libsimpleio</name>
    </assembly>
    <members>
        <member name="T:IO.Bindings.libsimpleio.libADC">
            <summary>
            Wrapper for libsimpleio A/D converter services.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libADC.ADC_get_name(System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Get the subsystem name for the specified Linux IIO A/D converter
            device.
            </summary>
            <param name="chip">Linux IIO device number.</param>
            <param name="name">Destination buffer.</param>
            <param name="size">Size of destination buffer.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libADC.ADC_open(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux IIO A/D converter input device.
            </summary>
            <param name="chip">Linux IIO device number.</param>
            <param name="channel">Input channel number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libADC.ADC_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux IIO A/D converter input device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libADC.ADC_read(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Read a Linux IIO A/D converter input device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="sample">Analog sample data.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libEvent">
            <summary>
            Wrapper for libsimpleio epoll services.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libEvent.EVENT_open(System.Int32@,System.Int32@)">
            <summary>
            Open an <c>epoll</c> event dispatcher.
            </summary>
            <param name="epfd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libEvent.EVENT_register_fd(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Register a file descriptor with an <c>epoll</c> event dispatcher.
            </summary>
            <param name="epfd">File descriptor for the dispatcher.</param>
            <param name="fd">File descriptor to register for events.</param>
            <param name="events">Events to register for.  May be a sum of the
            individual event flags.</param>
            <param name="handle">Event handle.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libEvent.EVENT_modify_fd(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Modify a file registration.
            </summary>
            <param name="epfd">File descriptor for the dispatcher.</param>
            <param name="fd">File descriptor to register for events.</param>
            <param name="events">Events to register for.  May be a sum of the
            individual event flags.</param>
            <param name="handle">Event handle.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libEvent.EVENT_unregister_fd(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Unregister a file from an <c>epoll</c> dispatcher.
            </summary>
            <param name="epfd">File descriptor for the dispatcher.></param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libEvent.EVENT_wait(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32,System.Int32@)">
            <summary>
            Wait for events from an <c>epoll</c> dispatcher.
            </summary>
            <param name="epfd">File descriptor for the displatcher.</param>
            <param name="fd">File descriptor the event is applicable to.</param>
            <param name="events">Events that occurred.  May be a sum of the
            individual event flags.</param>
            <param name="handle">Event handle provided whent the file descriptor
            was registered.</param>
            <param name="timeoutms">Time in milliseconds to wait for an event.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libEvent.EVENT_close(System.Int32,System.Int32@)">
            <summary>
            Close an <c>epoll</c> event dispatcher.
            </summary>
            <param name="epfd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libGPIO">
            <summary>
            Wrapper for libsimpleio GPIO services.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.DIRECTION_INPUT">
            <summary>
            Input data direction.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.DIRECTION_OUTPUT">
            <summary>
            Out data direction.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.DRIVER_PUSHPULL">
            <summary>
            Push-pull (source and sink) output driver.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.DRIVER_OPENDRAIN">
            <summary>
            Open drain (sink only) output driver.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.DRIVER_OPENSOURCE">
            <summary>
            Open source (source only) output driver
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EDGE_NONE">
            <summary>
            Interrupts are disabled.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EDGE_RISING">
            <summary>
            Interrupt on rising edge.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EDGE_FALLING">
            <summary>
            Interrupt on falling edge.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EDGE_BOTH">
            <summary>
            Interrupt on both edges.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.POLARITY_ACTIVELOW">
            <summary>
            Active low (inverted) polarity.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.POLARITY_ACTIVEHIGH">
            <summary>
            Active high (normal) polarity.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_configure(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Configure a Linux GPIO pin.
            </summary>
            <param name="pin">Pin number.</param>
            <param name="direction">Data direction.</param>
            <param name="state">Initial state for output pin.</param>
            <param name="edge">Interrupt edge for input pin.</param>
            <param name="polarity">Polarity</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_open(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux GPIO pin device.
            </summary>
            <param name="pin">Pin number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_read(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Read a Linux GPIO pin.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="state">Pin state.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_write(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Write a Linux GPIO pin.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="state">Pin state.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux GPIO pin device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_INFO_KERNEL">
            <summary>
            GPIO line is being used by the kernel.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_INFO_OUTPUT">
            <summary>
            GPIO line is configured as an output.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_INFO_ACTIVE_LOW">
            <summary>
            GPIO line is configured as active low (inverted).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_INFO_OPEN_DRAIN">
            <summary>
            GPIO line is configured as open drain (current sink only).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_INFO_OPEN_SOURCE">
            <summary>
            GPIO line is configured as open source (current source only).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_INPUT">
            <summary>
            Select GPIO line direction input.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_OUTPUT">
            <summary>
            Select GPIO line direction output.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_ACTIVE_HIGH">
            <summary>
            Select GPIO line polarity active high (normal).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_ACTIVE_LOW">
            <summary>
            Select GPIO line polarity active low (inverted).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_PUSH_PULL">
            <summary>
            Select GPIO line driver push-pull (current source and sink).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_OPEN_DRAIN">
            <summary>
            Select GPIO line driver open drain (current sink only).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.LINE_REQUEST_OPEN_SOURCE">
            <summary>
            Select GPIO line driver open source (current source only).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EVENT_REQUEST_NONE">
            <summary>
            Disable GPIO input interrupt.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EVENT_REQUEST_RISING">
            <summary>
            Enable GPIO input interrupt on rising edge.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EVENT_REQUEST_FALLING">
            <summary>
            Enable GPIO input interrupt on falling edge.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libGPIO.EVENT_REQUEST_BOTH">
            <summary>
            Enable GPIO input interrupt on both edges.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_chip_info(System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get GPIO chip information.
            </summary>
            <param name="chip">GPIO chip number.</param>
            <param name="name">GPIO chip name.</param>
            <param name="namesize">Maximum size of name.</param>
            <param name="label">GPIO chip label.</param>
            <param name="labelsize">Maximum size of label.</param>
            <param name="lines">Number of GPIO lines.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_line_info(System.Int32,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Get GPIO line information.
            </summary>
            <param name="chip">GPIO chip number.</param>
            <param name="line">GPIO line number.</param>
            <param name="name">GPIO line name.</param>
            <param name="namesize">Maximum size of name.</param>
            <param name="label">GPIO line label.</param>
            <param name="labelsize">Maximum size of label.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_line_open(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a single GPIO line.
            </summary>
            <param name="chip">GPIO chip number.</param>
            <param name="line">GPIO line number.</param>
            <param name="flags">GPIO line configuration flags.</param>
            <param name="events">GPIO line event flags.</param>
            <param name="state">GPIO initial output state.</param>
            <param name="fd">Linux file descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_line_read(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Read the state of a single GPIO line.
            </summary>
            <param name="fd">Linux file descriptor.</param>
            <param name="state">State of the GPIO line.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_line_write(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Write the state of a single GPIO line.
            </summary>
            <param name="fd">Linux file descriptor.</param>
            <param name="state">State of the GPIO line.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_line_event(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Read an edge trigger event from single GPIO line.
            </summary>
            <param name="fd">Linux file descriptor.</param>
            <param name="state">State of the GPIO line after the edge trigger
            event.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libGPIO.GPIO_line_close(System.Int32,System.Int32@)">
            <summary>
            Close a single GPIO line.
            </summary>
            <param name="fd">Linux file descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libHIDRaw">
            <summary>
            Wrapper for libsimpleio raw HID services.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_open(System.String,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux raw HID device by device node name.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="fd">Device node name.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_open_id(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux raw HID device by vendor ID and product ID.
            </summary>
            <param name="VID">Vendor ID.</param>
            <param name="PID">Product ID.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux raw HID.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_get_name(System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Get Linux raw HID name string.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="name">Destination buffer.</param>
            <param name="size">Size of destination buffer.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_get_info(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get Linux raw HID bus type, vendor ID, and product ID.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="bustype">Bus type.</param>
            <param name="vendor">Vendor ID.</param>
            <param name="product">Product ID.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_send(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Send a 64-byte report to a Linux HID.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Source buffer.</param>
            <param name="bufsize">Source buffer size.</param>
            <param name="count">Number of bytes actually sent.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libHIDRaw.HIDRAW_receive(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get a 64-byte report from a Linux HID.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
            <param name="count">Number of bytes actually received.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libI2C">
            <summary>
            Wrapper for libsimpleio I<sup>2</sup>C bus controller services.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libI2C.I2C_open(System.String,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux I<sup>2</sup>C bus controller device.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libI2C.I2C_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux I<sup>2</sup>C bus controller device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libI2C.I2C_transaction(System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Send bytes to and/or receive bytes from an I<sup>2</sup>C slave device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="slaveaddr">Slave address.</param>
            <param name="cmd">Source buffer.</param>
            <param name="cmdlen">Source buffer size.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Response buffer size.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libIPV4">
            <summary>
            Wrapper for libsimpleio IPv4 network services.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libIPV4.INADDR_ANY">
            <summary>
            IPv4 address for binding to all network interfaces.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libIPV4.INADDR_LOOPBACK">
            <summary>
            IPv4 address for binding to the loopback interface (aka
            <c>localhost</c>).
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libIPV4.INADDR_BROADCAST">
            <summary>
            IPv4 broadcast address.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libIPV4.MSG_DONTROUTE">
            <summary>
            Don't use a gateway to send out the packet, send to hosts only on
            directly connected networks.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libIPV4.MSG_DONTWAIT">
            <summary>
            Enables nonblocking operation; if the operation would block,
            <c>EAGAIN</c> or <c>EWOULDBLOCK</c> is returned.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libIPV4.MSG_MORE">
            <summary>
            The caller has more data to send.  This flag informs the kernel
            to package all of the data sent in calls with this flag set into
            a single datagram which is transmitted only when a call is
            performed that does not specify this flag.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.IPV4_resolve(System.String,System.Int32@,System.Int32@)">
            <summary>
            Resolve a domain name to an IPv4 host address.
            </summary>
            <param name="hostname">Host name to resolve.</param>
            <param name="host">IPv4 host address.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.IPV4_ntoa(System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            Convert an IPv4 address to a dotted notation string (<i>e.g.</i> 1.2.3.4).
            </summary>
            <param name="host">IPv4 host address</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.TCP4_connect(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Connect to a TCP server.
            </summary>
            <param name="host">IPv4 host address.</param>
            <param name="port">TCP port number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.TCP4_accept(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Start TCP server and wait for a single connection.
            </summary>
            <param name="host">IPv4 address, of the interface to listen on.  Use
            0.0.0.0 to listen on all interfaces.</param>
            <param name="port">TCP port number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.TCP4_server(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Start a TCP server and fork for each connection.
            </summary>
            <param name="host">IPv4 address, of the interface to listen on.  Use
            0.0.0.0 to listen on all interfaces.</param>
            <param name="port">TCP port number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.TCP4_close(System.Int32,System.Int32@)">
            <summary>
            Close a TCP connection.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.TCP4_send(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Send bytes to TCP peer.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Source buffer.</param>
            <param name="bufsize">Source buffer size.</param>
            <param name="count">Number of bytes actually sent.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.TCP4_receive(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Receive bytes from TCP peer.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
            <param name="count">Number of bytes actually received.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.UDP4_open(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a UDP socket.
            </summary>
            <param name="host">IPv4 host address.</param>
            <param name="port">UDP port number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.UDP4_close(System.Int32,System.Int32@)">
            <summary>
            Close a UDP socket.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.UDP4_send(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Send a UDP datagram.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="host">Destination IPv4 host address.</param>
            <param name="port">Destination UDP port number.</param>
            <param name="buf">Source buffer.</param>
            <param name="bufsize">Source buffer size.</param>
            <param name="flags">Flags for the Linux <c>sendto()</c> system call.</param>
            <param name="count">Number of bytes actually sent.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libIPV4.UDP4_receive(System.Int32,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Receive a UDP datagram.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="host">Source IPv4 host address.</param>
            <param name="port">Source UDP port number.</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
            <param name="flags">Flags for the Linux <c>recvfrom()</c> system call.</param>
            <param name="count">Number of bytes actually received.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libLinux">
            <summary>
            Wrapper for libsimpleio Linux system call services.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_PROGNAME">
            <summary>
            Use the program name for the identity string.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_KERN">
            <summary>
            Kernel messages.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_USER">
            <summary>
            Random user-level messages.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_MAIL">
            <summary>
            Mail system.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_DAEMON">
            <summary>
            System daemons.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_AUTH">
            <summary>
            Security/authorization messages.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_SYSLOG">
            <summary>
            Messages generated internally by syslogd
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LPR">
            <summary>
            Line printer subsystem
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_NEWS">
            <summary>
            Network news subsystem
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_UUCP">
            <summary>
            UUCP subsystem
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_CRON">
            <summary>
            <c>cron</c> daemon messages.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_AUTHPRIV">
            <summary>
            Securit/authorization messages.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_FTP">
            <summary>
            <c>FTP</c> daemon messages.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL0">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL1">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL2">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL3">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL4">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL5">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL6">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_LOCAL7">
            <summary>
            Reserved for local use.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_EMERG">
            <summary>
            System is unusable.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_ALERT">
            <summary>
            Action must be taken immediately.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_CRIT">
            <summary>
            Critical condition.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_ERR">
            <summary>
            Error condition.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_WARNING">
            <summary>
            Warning condition.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_NOTICE">
            <summary>
            Normal but significant condition.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_INFO">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.LOG_DEBUG">
            <summary>
            Debug message.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_detach(System.Int32@)">
            <summary>
            Detach the process and run it in the background.
            </summary>
            <param name="error">Error code.  Zero upon success or an
            <c>errno</c> value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_drop_privileges(System.String,System.Int32@)">
            <summary>
            Drop process privileges to those of the specified user.
            <remarks>Only a process running at superuser privilege is allowed
            to drop privileges.</remarks>
            </summary>
            <param name="username">User privileges to assume.</param>
            <param name="error">Error code.  Zero upon success or an
            <c>errno</c> value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_openlog(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Open a connection to the <c>syslog</c> service.
            </summary>
            <param name="id">Program identifier.</param>
            <param name="options">Logging options.</param>
            <param name="facility">Logging facility identifier.</param>
            <param name="error">Error code.  Zero upon success or an
            <c>errno</c> value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_syslog(System.Int32,System.String,System.Int32@)">
            <summary>
            Send a message to the <c>syslog</c> service.
            </summary>
            <param name="priority">Message priority</param>
            <param name="msg">Message to send.</param>
            <param name="error">Error code.  Zero upon success or an
            <c>errno</c> value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_strerror(System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieve the error message for a particular <c>errno</c>
            error code.
            </summary>
            <param name="error">Error code.</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.POLLIN">
            <summary>
            There is data to read.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.POLLPRI">
            <summary>
            There is urgent data to read.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.POLLOUT">
            <summary>
            Writing is now possible.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.POLLERR">
            <summary>
            An error occurred.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.POLLHUP">
            <summary>
            Peer closed connection.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libLinux.POLLNVAL">
            <summary>
            File descriptor is invalid.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_poll(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32@)">
            <summary>
            Wait for an event on one or more files.
            </summary>
            <param name="numfiles">Number elements in each of the
            following arrays.</param>
            <param name="files">File descriptors.</param>
            <param name="events">Events to wait for on each file
            descriptor.</param>
            <param name="results">Events that occurred on each file
            descriptor.</param>
            <param name="timeoutms">Milliseconds to wait for an event
            to occur.  A value of -1 means wait forever and a value
            of 0 means do not wait at all.</param>
            <param name="error">Error code.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libLinux.LINUX_usleep(System.Int32,System.Int32@)">
            <summary>
            Sleep for the specified number of microseconds.
            </summary>
            <param name="microsecs">Number of microseconds to sleep.</param>
            <param name="error">Error code.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libPWM">
            <summary>
            Wrapper for libsimpleio PWM output services.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libPWM.ActiveLow">
            <summary>
            Configure the PWM output as active low (inverted).
            </summary>
            <remarks>Not all platforms support active low (inverted) PWM
            outputs.</remarks>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libPWM.ActiveHigh">
            <summary>
            Configure the PWM output as active high (normal).
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libPWM.PWM_configure(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Configure a Linux PWM output device.
            </summary>
            <param name="chip">Chip number.</param>
            <param name="channel">Channel number.</param>
            <param name="period">Pulse period in microseconds.</param>
            <param name="ontime">Initial on time in microseconds.</param>
            <remarks>On many platforms two more more PWM outputs may share the same
            clock generator, so configuring different PWM pulse periods may not be
            possible.</remarks>
            <param name="polarity">PWM output polarity (0 for active low/inverted or 1
            for active high/normal).</param>
            <remarks>Not all platforms support active low (inverted) PWM outputs.</remarks>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libPWM.PWM_open(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux PWM output device.
            </summary>
            <param name="chip">Chip number.</param>
            <param name="channel">Channel number.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libPWM.PWM_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux PWM output device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libPWM.PWM_write(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Set a Linux PWM output device duty cycle.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="ontime">On time in microseconds.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libSerial">
            <summary>
            Wrapper for libsimpleio serial port services.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libSerial.PARITY_NONE">
            <summary>
            Disable parity checking.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libSerial.PARITY_EVEN">
            <summary>
            Request even parity checking.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libSerial.PARITY_ODD">
            <summary>
            Request odd parity checking.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSerial.SERIAL_open(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux serial port device.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="baudrate">Baud rate.</param>
            <param name="parity">Parity setting (0 to 2).</param>
            <param name="databits">Word size setting (5 to 8).</param>
            <param name="stopbits">Number of stop bits (1 or 2).</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSerial.SERIAL_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux serial port device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSerial.SERIAL_send(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Send data to a Linux serial port device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Source buffer.</param>
            <param name="bufsize">Source buffer size.</param>
            <param name="count">Number of bytes actually sent.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSerial.SERIAL_receive(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Receive data from a Linux serial port device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
            <param name="count">Number of bytes actually received.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libSPI">
            <summary>
            Wrapper for libsimpleio SPI device services.
            </summary>
        </member>
        <member name="F:IO.Bindings.libsimpleio.libSPI.SPI_AUTO_CS">
            <summary>
            Use hardware slave select.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSPI.SPI_open(System.String,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
             <summary>
             Open a Linux SPI device.
             </summary>
             <param name="devname">Device node name.</param>
             <param name="mode">SPI transfer mode (0 .. 3)</param>
             <param name="wordsize">SPI transfer word size (8, 16, or 32).</param>
             <param name="speed">SPI transfer speed in Hz.</param>
             <param name="fd">File descriptor.</param>
             <param name="error">Error code.  Zero upon success or an <c>errno</c>
             value upon failure.</param>
            <remarks>The Linux kernel create a device nodes for each SPI slave
            device, of the form
            <c>/dev/spidevX.Y</c> where <c>X</c> is the SPI bus
            controller number and <c>Y</c> is the SPI slave select number.</remarks>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSPI.SPI_transaction(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Send bytes to and/or receive bytes from a Linux SPI device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="csfd">Chip select file descriptor.</param>
            <param name="cmd">Source buffer.</param>
            <param name="cmdlen">Source buffer size.</param>
            <param name="delayus">Delay in microseconds between the write and read operations.</param>
            <param name="resp">Destination buffer.</param>
            <param name="resplen">Destination buffer size.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libSPI.SPI_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux SPI device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libStream">
            <summary>
            Wrapper for libsimpleio Stream Framing Protocol services.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libStream.STREAM_encode_frame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Encode a frame.
            </summary>
            <param name="src">Source buffer.</param>
            <param name="srclen">Source buffer size.</param>
            <param name="dst">Destination buffer.</param>
            <param name="dstsize">Destination buffer size.</param>
            <param name="dstlen">Size of encoded frame.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libStream.STREAM_decode_frame(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Decode a frame.
            </summary>
            <param name="src">Source buffer.</param>
            <param name="srclen">Source buffer size.</param>
            <param name="dst">Destination buffer.</param>
            <param name="dstsize">Destination buffer size.</param>
            <param name="dstlen">Size of decoded frame.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libStream.STREAM_receive_frame(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Receive an encoded frame.
            </summary>
            <param name="fd">File descriptior.</param>
            <param name="buf">Destination buffer.</param>
            <param name="bufsize">Destination buffer size.</param>
            <param name="count">Number of bytes actually received.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libStream.STREAM_send_frame(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Send an encoded frame.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="buf">Source buffer.</param>
            <param name="bufsize">Source buffer size.</param>
            <param name="count">Number of bytes actually sent.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Bindings.libsimpleio.libWatchdog">
            <summary>
            Wrapper for libsimpleio watchdog timer services.
            </summary>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libWatchdog.WATCHDOG_open(System.String,System.Int32@,System.Int32@)">
            <summary>
            Open a Linux watchdog timer device.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libWatchdog.WATCHDOG_close(System.Int32,System.Int32@)">
            <summary>
            Close a Linux watchdog timer device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libWatchdog.WATCHDOG_get_timeout(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Query a Linux watchdog timer device.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="timeout">Timeout period in seconds.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libWatchdog.WATCHDOG_set_timeout(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Change the watchdog timer period.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="newtimeout">Requested timeout period in seconds.</param>
            <param name="timeout">Actual timeout period in seconds.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
            <remarks>Not all platforms allow changing the timeout period.
            Some platforms may not allow <i>increasing</i> the period.</remarks>
        </member>
        <member name="M:IO.Bindings.libsimpleio.libWatchdog.WATCHDOG_kick(System.Int32,System.Int32@)">
            <summary>
            Reset the watchdog timer.
            </summary>
            <param name="fd">File descriptor.</param>
            <param name="error">Error code.  Zero upon success or an <c>errno</c>
            value upon failure.</param>
        </member>
        <member name="T:IO.Objects.Motor.PWM.Output">
            <summary>
            Encapsulates motors controlled by PWM and GPIO outputs.
            </summary>
        </member>
        <member name="M:IO.Objects.Motor.PWM.Output.#ctor(IO.Interfaces.GPIO.Pin,IO.Interfaces.PWM.Output,System.Double)">
            <summary>
            Constructor for a single motor, using one GPIO pin for
            direction control, and one PWM output for speed control.
            </summary>
            <param name="direction">GPIO pin instance (for direction
            control).</param>
            <param name="speed">PWM output instance (for speed
            control).</param>
            <param name="velocity">Initial normalized motor velocity.
            Allowed values are -1.0 (full speed reverse) to +1.0
            (full speed forward.</param>
        </member>
        <member name="M:IO.Objects.Motor.PWM.Output.#ctor(IO.Interfaces.PWM.Output,IO.Interfaces.PWM.Output,System.Double)">
            <summary>
            Constructor for a single motor, using two PWM outputs
            for clockwise and counterclockwise rotation control.
            </summary>
            <param name="clockwise">PWM output instance (for clockwise
            rotation control).</param>
            <param name="counterclockwise">PWM output instance (for
            counterclockwise rotation control).</param>
            <param name="velocity">Initial normalized motor velocity.
            Allowed values are -1.0 (full speed reverse) to +1.0
            (full speed forward.</param>
        </member>
        <member name="P:IO.Objects.Motor.PWM.Output.velocity">
            <summary>
            Write-only property for setting the normalized motor velocity.
            Allowed values are -1.0 (full speed reverse) to +1.0
            (full speed forward.
            </summary>
        </member>
        <member name="T:IO.Objects.Motor.Servo.Output">
            <summary>
            Encapsulates motors controlled by servo outputs (e.g. continuous
            rotation servos).
            </summary>
        </member>
        <member name="M:IO.Objects.Motor.Servo.Output.#ctor(IO.Interfaces.Servo.Output,System.Double)">
            <summary>
            Consructor for a single motor output.
            </summary>
            <param name="servo">Servo output instance.</param>
            <param name="velocity">Initial normalized motor velocity.
            Allowed values are -1.0 (full speed reverse) to +1.0
            (full speed forward.</param>
        </member>
        <member name="P:IO.Objects.Motor.Servo.Output.velocity">
            <summary>
            Write-only property for setting the normalized motor velocity.
            Allowed values are -1.0 (full speed reverse) to +1.0
            (full speed forward.
            </summary>
        </member>
        <member name="T:IO.Objects.USB.Munts.HID">
            <summary>
            USB device constants for Munts Technologies USB HID devices.
            </summary>
        </member>
        <member name="F:IO.Objects.USB.Munts.HID.Vendor">
            <summary>
            Vendor ID for Munts Technologies
            </summary>
        </member>
        <member name="F:IO.Objects.USB.Munts.HID.Product">
            <summary>
            Product ID for Munts Technologies USB hid devices.
            </summary>
        </member>
        <member name="T:IO.Objects.USB.Munts.Serial">
            <summary>
            USB device constants for Munts Technologies USB serial port devices.
            </summary>
        </member>
        <member name="F:IO.Objects.USB.Munts.Serial.Vendor">
            <summary>
            Vendor ID for Munts Technologies
            </summary>
        </member>
        <member name="F:IO.Objects.USB.Munts.Serial.Product">
            <summary>
            Product ID for Munts Technologies USB serial port devices.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.ADC.Sample">
            <summary>
            Encapsulates Linux Industrial I/O Subsystem ADC inputs usingi
            <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.ADC.Sample.name(System.Int32)">
            <summary>
            Retrieve the subsystem name string for a Linux Industrial
            I/O Subsystem ADC device.
            </summary>
            <param name="chip">ADC chip number.</param>
            <returns>Subsystem name.</returns>
        </member>
        <member name="M:IO.Objects.libsimpleio.ADC.Sample.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for a single ADC input.
            </summary>
            <param name="chip">ADC chip number.</param>
            <param name="channel">ADC channel number.</param>
            <param name="resolution">Bits of resolution.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.ADC.Sample.sample">
            <summary>
            Read-only property returning an integer analog sample from an ADC
            input.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.ADC.Sample.resolution">
            <summary>
            Read-only property returning the number of bits of resolution.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.ADC.Sample.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the ADC
            input.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.Exceptions.Exception">
            <summary>
            Encapsulates exceptions that may include an optional
            <c>errno</c> value.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.Exceptions.Exception.#ctor(System.String)">
            <summary>
            Constructor for an exception that writes an error message to
            standard output.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.Exceptions.Exception.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for an exception that writes an error message
            including an <c>errno</c> value.
            </summary>
            <param name="message">Error message.</param>
            <param name="error">Error code.</param>
        </member>
        <member name="T:IO.Objects.libsimpleio.GPIO.Designator">
            <summary>
            GPIO pin designator.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Designator.chip">
            <summary>
            Linux kernel GPIO chip number.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Designator.line">
            <summary>
            Linux kernel GPIO line number.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.GPIO.Designator.#ctor(System.UInt32,System.UInt32)">
            <summary>
            GPIO pin designator constructor.
            </summary>
            <param name="chip">Linux kernel GPIO chip number.</param>
            <param name="line">Linux kernel GPIO line number.</param>
        </member>
        <member name="T:IO.Objects.libsimpleio.GPIO.Pin">
            <summary>
            Encapsulates Linux GPIO pins using <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Unavailable">
            <summary>
            GPIO pin designator for unusable pins.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.GPIO.Pin.Driver">
            <summary>
            GPIO output driver settings.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Driver.PushPull">
            <summary>
            Push Pull (current source/sink) output driver.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Driver.OpenDrain">
            <summary>
            Open Drain (current sink) output driver.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Driver.OpenSource">
            <summary>
            Open Source (current source) output driver.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.GPIO.Pin.Edge">
            <summary>
            GPIO input interrupt edge settings.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Edge.None">
            <summary>
            Configure GPIO input pin with interrupt disabled.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Edge.Rising">
            <summary>
            Configure GPIO input pin to interrupt on rising edge.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Edge.Falling">
            <summary>
            Configure GPIO pin to interrupt on falling edge.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Edge.Both">
            <summary>
            Configure GPIO pin to interrupt on both edges.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.GPIO.Pin.Polarity">
            <summary>
            GPIO polarity settings
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Polarity.ActiveLow">
            <summary>
            Configure GPIO pin as active low (inverted logic).
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.GPIO.Pin.Polarity.ActiveHigh">
            <summary>
            Configure GPIO pin as active high (normal logic).
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.GPIO.Pin.#ctor(System.UInt32,System.UInt32,IO.Interfaces.GPIO.Direction,System.Boolean,IO.Objects.libsimpleio.GPIO.Pin.Driver,IO.Objects.libsimpleio.GPIO.Pin.Edge,IO.Objects.libsimpleio.GPIO.Pin.Polarity)">
            <summary>
            Constructor for a single GPIO pin.
            </summary>
            <param name="chip">Linux kernel GPIO chip number.</param>
            <param name="line">Linux kernel GPIO line number.</param>
            <param name="dir">Data direction.</param>
            <param name="state">Initial output state.</param>
            <param name="driver">Output driver setting</param>
            <param name="edge">Interrupt edge setting.</param>
            <param name="polarity">Polarity setting.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.GPIO.Pin.#ctor(IO.Objects.libsimpleio.GPIO.Designator,IO.Interfaces.GPIO.Direction,System.Boolean,IO.Objects.libsimpleio.GPIO.Pin.Driver,IO.Objects.libsimpleio.GPIO.Pin.Edge,IO.Objects.libsimpleio.GPIO.Pin.Polarity)">
            <summary>
            Constructor for a single GPIO pin.
            </summary>
            <param name="pin">GPIO pin designator.</param>
            <param name="dir">Data direction.</param>
            <param name="state">Initial output state.</param>
            <param name="driver">Output driver setting</param>
            <param name="edge">Interrupt edge setting.</param>
            <param name="polarity">Polarity setting.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.GPIO.Pin.state">
            <summary>
            Read/Write GPIO state property.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.GPIO.Pin.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the
            GPIO pin.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.HID.Messenger">
            <summary>
            Encapsulates Linux raw HID devices using <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.HID.Messenger.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for a single raw HID device.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="timeoutms">Time in milliseconds to wait for
            read and write operations to complete.  Zero means wait
            forever.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.HID.Messenger.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for a single raw HID device.
            </summary>
            <param name="VID">Vendor ID.</param>
            <param name="PID">Product ID.</param>
            <param name="timeoutms">Time in milliseconds to wait for
            read and write operations to complete.  Zero means wait
            forever.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.HID.Messenger.Send(IO.Interfaces.Message64.Message)">
            <summary>
            Send a 64-byte command message to a raw HID device.
            </summary>
            <param name="cmd">64-byte command message.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.HID.Messenger.Receive(IO.Interfaces.Message64.Message)">
            <summary>
            Receive a 64-byte response message from a raw HID device.
            </summary>
            <param name="resp">64-byte response message.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.HID.Messenger.Transaction(IO.Interfaces.Message64.Message,IO.Interfaces.Message64.Message)">
            <summary>
            Send a 64-byte command message and receive a 64-byte response
            message.
            </summary>
            <param name="cmd">64-byte command message.</param>
            <param name="resp">64-byte response message.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.HID.Messenger.name">
            <summary>
            Read-only property returning the device information string for a
            raw HID device.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.HID.Messenger.bustype">
            <summary>
            Read-only property returning the bus type identifierfor a raw HID
            device.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.HID.Messenger.vendor">
            <summary>
            Read-only property returning the bus type identifierfor a raw HID
            device.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.HID.Messenger.product">
            <summary>
            Read-only property returning the vendor identifierfor a raw HID
            device.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.HID.Messenger.fd">
            <summary>
            Read-only property returning the Linux file descriptor for a raw
            HID device.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.I2C.Bus">
            <summary>
            Encapsulates Linux I<sup>2</sup>C bus controllers using
            <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.I2C.Bus.#ctor(System.String)">
            <summary>
            Constructor for a single I<sup>2</sup>C bus controller.
            </summary>
            <param name="devname">Device node name.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.I2C.Bus.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Read bytes from an I<sup>2</sup>C device.
            </summary>
            <param name="slaveaddr">Slave device address.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.I2C.Bus.Write(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write bytes to an I<sup>2</sup>C device.
            </summary>
            <param name="slaveaddr">Slave device address.</param>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.I2C.Bus.Transaction(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write and receive bytes to/from an I<sup>2</sup>C device.
            </summary>
            <param name="slaveaddr">Device slave address.</param>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
            <param name="delayus">Delay in microseconds between the I<sup>2</sup>C
            write and read cycles.  Allowed values are 0 to 65535 microseconds.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.I2C.Bus.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the
            I<sup>2</sup>C bus controller.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.PWM.Output">
            <summary>
            Encapsulates Linux PWM outputs using <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.PWM.Output.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Constructor for a single PWM output.
            </summary>
            <param name="chip">PWM chip number.</param>
            <param name="channel">PWM channel number.</param>
            <param name="frequency">PWM pulse frequency.</param>
            <param name="dutycycle">Initial PWM output duty cycle.
            Allowed values are 0.0 to 100.0 percent.</param>
            <param name="polarity">PWM output polarity.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.PWM.Output.dutycycle">
            <summary>
            Write-only property for setting the PWM output duty cycle.
            Allowed values are 0.0 to 100.0 percent.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.PWM.Output.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the PWM
            output.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.Servo.Output">
            <summary>
            Encapsulates Linux servo outputs using <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.Servo.Output.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Constructor for a single servo output.
            </summary>
            <param name="chip">PWM chip number.</param>
            <param name="channel">PWM channel number.</param>
            <param name="frequency">PWM pulse frequency.</param>
            <param name="position">Initial servo position).
            Allowed values are -1.0 to +1.0.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.Servo.Output.position">
            <summary>
            Write-only property for setting the servo position.
            Allowed values are -1.0 to +1.0.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.Servo.Output.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the
            servo output.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.SPI.Device">
            <summary>
            Encapsulates Linux SPI devices using <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.SPI.Device.AUTOCHIPSELECT">
            <summary>
            Use hardware slave select.
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.SPI.Device.#ctor(System.String,System.Int32,System.Int32,System.Int32,IO.Objects.libsimpleio.GPIO.Pin)">
            <summary>
            Constructor for a single SPI device.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="mode">SPI clock mode.</param>
            <param name="wordsize">SPI transfer word size.</param>
            <param name="speed">SPI transfer speed.</param>
            <param name="cspin">SPI slave select GPIO pin number, or
            <c>AUTOCHIPSELECT</c>.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.SPI.Device.Read(System.Byte[],System.Int32)">
            <summary>
            Read bytes from an SPI slave device.
            </summary>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.SPI.Device.Write(System.Byte[],System.Int32)">
            <summary>
            Write bytes to an SPI slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.SPI.Device.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write and read bytes to and from an SPI slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
            <param name="delayus">Delay in microseconds between write and read
            operations.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="P:IO.Objects.libsimpleio.SPI.Device.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the
            SPI slave device.
            </summary>
        </member>
        <member name="T:IO.Objects.libsimpleio.Watchdog.Timer">
            <summary>
            Encapsulates Linux watchdog timers using <c>libsimpleio</c>.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.Watchdog.Timer.DefaultDevice">
             <summary>
             Default watchdog timer device name.
            </summary>
        </member>
        <member name="F:IO.Objects.libsimpleio.Watchdog.Timer.DefaultTimeout">
            <summary>
            Default watchdog timer timeout value (disabled).
            </summary>
        </member>
        <member name="M:IO.Objects.libsimpleio.Watchdog.Timer.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for a single watchdog timer.
            </summary>
            <param name="devname">Device node name.</param>
            <param name="timeout">Watchdog timeout setting in seconds, or
            <c>DefaultTimeout</c>.</param>
        </member>
        <member name="M:IO.Objects.libsimpleio.Watchdog.Timer.Kick">
            <summary>
            Reset the watchdog timer.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.Watchdog.Timer.timeout">
            <summary>
            Get or set the watchdog timeout.  Not all platforms may support
            this.  Even if supported, there may be constraints.  For example,
            some platforms allow shortening the timeout but not lengthening it.
            </summary>
        </member>
        <member name="P:IO.Objects.libsimpleio.Watchdog.Timer.fd">
            <summary>
            Read-only property returning the Linux file descriptor for the
            watchdog timer.
            </summary>
        </member>
        <member name="T:IO.Objects.Platforms.BeagleBone">
            <summary>
            This class defines identifiers for the devices provided by the
            BeagleBone hardware platform.
            </summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO2">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO3">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO4">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO5">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO7">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO8">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO9">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO10">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO11">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO12">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO13">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO14">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO15">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO20">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO22">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO23">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO26">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO27">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO30">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO31">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO32">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO33">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO34">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO35">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO36">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO37">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO38">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO39">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO44">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO45">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO46">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO47">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO48">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO49">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO50">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO51">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO60">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO61">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO62">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO63">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO65">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO66">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO67">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO68">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO69">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO70">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO71">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO72">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO73">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO74">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO75">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO76">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO77">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO78">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO79">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO80">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO81">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO86">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO87">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO88">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO89">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO110">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO111">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO112">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO113">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO115">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.BeagleBone.GPIO117">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="T:IO.Objects.Platforms.PocketBeagle">
            <summary>
            This class defines identifiers for the devices provided by the
            PocketBeagle hardware platform.
            </summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO2">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO3">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO4">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO5">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO7">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO12">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO13">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO14">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO15">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO19">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO20">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO23">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO26">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO27">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO30">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO31">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO40">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO41">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO42">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO43">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO44">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO45">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO46">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO47">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO50">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO52">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO57">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO58">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO59">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO60">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO64">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO65">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO86">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO87">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO88">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO89">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO110">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO111">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO112">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO113">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO114">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO115">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO116">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.PocketBeagle.GPIO117">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="T:IO.Objects.Platforms.RaspberryPi">
            <summary>
            This class defines identifiers for the devices provided by the
            Raspberry Pi hardware platform.
            </summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO2">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO3">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO4">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO7">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO8">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO9">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO10">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO11">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO14">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO15">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO17">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO18">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO22">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO23">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO24">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO25">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO27">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO5">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO6">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO12">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO13">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO16">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO19">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO20">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO21">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="F:IO.Objects.Platforms.RaspberryPi.GPIO26">
            <summary>Legacy GPIO pin designator</summary>
        </member>
        <member name="T:IO.Devices.ADC121C021.Sample">
            <summary>
            Encapsulates the ADC121C021 I<sup>2</sup>C A/D converter.
            </summary>
        </member>
        <member name="M:IO.Devices.ADC121C021.Sample.#ctor(IO.Interfaces.I2C.Bus,System.Byte)">
            <summary>
            Constructor for an ADC121C021 analog input.
            </summary>
            <param name="bus">I<sup>2</sup>C bus controller.</param>
            <param name="addr">I<sup>2</sup>C slave address.</param>
        </member>
        <member name="P:IO.Devices.ADC121C021.Sample.sample">
            <summary>
            Returns a single 12-bit analog sample.
            </summary>
        </member>
        <member name="P:IO.Devices.ADC121C021.Sample.resolution">
            <summary>
            Return the number of bits of A/D resolution.
            </summary>
        </member>
        <member name="T:IO.Devices.PCA8574.Device">
            <summary>
            Encapsulates PCA8574 (and similar) I<sup>2</sup>C GPIO Expanders.
            </summary>
            <remarks>This class supports the following I<sup>2</sup>C GPIO
            expander devices:  MAX7328, MAX7329, PCA8574, PCA9670, PCA9672,
            PCA9674, PCF8574, and TCA9554.</remarks>
        </member>
        <member name="F:IO.Devices.PCA8574.Device.MAX_PINS">
            <summary>
            The number of available GPIO pins per chip.
            </summary>
        </member>
        <member name="M:IO.Devices.PCA8574.Device.#ctor(IO.Interfaces.I2C.Bus,System.Int32)">
            <summary>
            Constructor for a PCA8574 (or similar) GPIO Expander.
            </summary>
            <param name="bus">I<sup>2</sup>C bus controller.</param>
            <param name="addr">I<sup>2</sup>C slave address.</param>
        </member>
        <member name="M:IO.Devices.PCA8574.Device.Read">
            <summary>
            Return actual state of the GPIO pins.
            </summary>
            <returns>Pin states (MSB = GPIO7).</returns>
        </member>
        <member name="M:IO.Devices.PCA8574.Device.State">
            <summary>
            Return last known state of the GPIO pins.
            </summary>
            <returns>Pin states (MSB = GPIO7).</returns>
        </member>
        <member name="M:IO.Devices.PCA8574.Device.Write(System.Byte)">
            <summary>
            Write all GPIO pins.
            </summary>
            <param name="data">Data to write to pins (MSB = GPIO7).</param>
        </member>
        <member name="M:IO.Devices.PCA8574.Device.Set(System.Byte)">
            <summary>
            Set selected GPIO pins.
            </summary>
            <param name="data">Pins to set high (MSB = GPIO7).</param>
        </member>
        <member name="M:IO.Devices.PCA8574.Device.Clear(System.Byte)">
            <summary>
            Clear selected GPIO pins.
            </summary>
            <param name="data">Pins to set low (MSB = GPIO7).</param>
        </member>
        <member name="T:IO.Devices.PCA8574.Pin">
            <summary>
            Encapsulates PCA8574 (and similar) I<sup>2</sup>C GPIO Expander pins.
            </summary>
            <remarks>This class supports the following I<sup>2</sup>C GPIO
            expander devices:  MAX7328, MAX7329, PCA8574, PCA9670, PCA9672,
            PCA9674, PCF8574, and TCA9554.</remarks>
        </member>
        <member name="M:IO.Devices.PCA8574.Pin.#ctor(IO.Devices.PCA8574.Device,System.Int32,IO.Interfaces.GPIO.Direction,System.Boolean)">
            <summary>
            Constructor for a single GPIO pin.
            </summary>
            <param name="dev">PCA8574 (or similar) device.</param>
            <param name="num">GPIO pin number.</param>
            <param name="dir">Data direction.</param>
            <param name="state">Initial output state.</param>
        </member>
        <member name="P:IO.Devices.PCA8574.Pin.state">
            <summary>
            Read/Write GPIO state property.
            </summary>
        </member>
        <member name="T:IO.Devices.PCA9685.Device">
            <summary>
            Encapsulates the PCA9685 I<sup>2</sup>C PWM Controller.
            </summary>
        </member>
        <member name="F:IO.Devices.PCA9685.Device.MIN_CLOCK">
            <summary>
            Minimum clock frequency.
            </summary>
        </member>
        <member name="F:IO.Devices.PCA9685.Device.MAX_CLOCK">
            <summary>
            Maximum clock frequency.
            </summary>
        </member>
        <member name="F:IO.Devices.PCA9685.Device.INTERNAL_CLOCK">
            <summary>
            Select internal 25 MHz clock oscillator.
            </summary>
        </member>
        <member name="F:IO.Devices.PCA9685.Device.MIN_CHANNEL">
            <summary>
            Minimum PCA9685 output channel number.
            </summary>
        </member>
        <member name="F:IO.Devices.PCA9685.Device.MAX_CHANNEL">
            <summary>
            Maximum PCA9685 output channel number.
            </summary>
        </member>
        <member name="M:IO.Devices.PCA9685.Device.#ctor(IO.Interfaces.I2C.Bus,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for a single PCA9685 device.
            </summary>
            <param name="bus">I<sup>2</sup>C bus controller object.</param>
            <param name="addr">I<sup>2</sup>C slave address.</param>
            <param name="freq">PWM pulse frequency.  Default is 50 Hz.</param>
            <param name="clock">PCA9685 clock source.
            Use <c>INTERNAL_CLOCK</c>c> to select the internal 25 MHz clock generator.
            </param>
        </member>
        <member name="M:IO.Devices.PCA9685.Device.ReadChannel(System.Byte,System.Byte[]@)">
            <summary>
            Read PCA9685 output channel data.
            </summary>
            <param name="channel">Output channel number.</param>
            <param name="data">Output channel data (4 bytes).</param>
        </member>
        <member name="M:IO.Devices.PCA9685.Device.WriteChannel(System.Byte,System.Byte[])">
            <summary>
            Write PCA9685 output channel data.
            </summary>
            <param name="channel">Output channel number.</param>
            <param name="data">Output channel data.</param>
        </member>
        <member name="P:IO.Devices.PCA9685.Device.Frequency">
            <summary>
            Read-only property returning the configured PWM pulse frequency.
            </summary>
        </member>
        <member name="T:IO.Devices.PCA9685.GPIO.Pin">
            <summary>
            Encapsulates PCA9685 GPIO outputs.
            </summary>
        </member>
        <member name="M:IO.Devices.PCA9685.GPIO.Pin.#ctor(IO.Devices.PCA9685.Device,System.Int32,System.Boolean)">
            <summary>
            Constructor for a single GPIO output pin.
            </summary>
            <param name="dev">PCA9685 device object.</param>
            <param name="channel">Output channel number.</param>
            <param name="state">Initial output state.</param>
        </member>
        <member name="P:IO.Devices.PCA9685.GPIO.Pin.state">
            <summary>
            Read/Write GPIO output state property.
            </summary>
        </member>
        <member name="T:IO.Devices.PCA9685.PWM.Output">
            <summary>
            Encapsulates PCA9685 PWM outputs.
            </summary>
        </member>
        <member name="M:IO.Devices.PCA9685.PWM.Output.#ctor(IO.Devices.PCA9685.Device,System.Int32,System.Double)">
            <summary>
            Constructor for a single PWM output.
            </summary>
            <param name="dev">PCA9685 device object.</param>
            <param name="channel">Output channel number.</param>
            <param name="dutycycle">Initial PWM output duty cycle.
            Allowed values are 0.0 to 100.0 percent.</param>
        </member>
        <member name="P:IO.Devices.PCA9685.PWM.Output.dutycycle">
            <summary>
            Write-only property for setting the PWM output duty cycle.
            Allowed values are 0.0 to 100.0 percent.
            </summary>
        </member>
        <member name="T:IO.Devices.PCA9685.Servo.Output">
            <summary>
            Encapsulates PCA9685 servo outputs.
            </summary>
        </member>
        <member name="M:IO.Devices.PCA9685.Servo.Output.#ctor(IO.Devices.PCA9685.Device,System.Int32,System.Double)">
            <summary>
            Constructor for a single servo output.
            </summary>
            <param name="dev">PCA9685 device object.</param>
            <param name="channel">Output channel number.</param>
            <param name="position">Initial normalized servo position.
            Allowed values are -0.0 to +1.0.</param>
        </member>
        <member name="P:IO.Devices.PCA9685.Servo.Output.position">
            <summary>
            Write-only property for setting the normalized servo position.
            Allowed values are -0.0 to+1.0.
            </summary>
        </member>
        <member name="T:IO.Interfaces.ADC.Sample">
            <summary>
            Abstract interface for ADC inputs returning an integer sample value.
            </summary>
        </member>
        <member name="P:IO.Interfaces.ADC.Sample.sample">
            <summary>
            Read-only property returning an integer analog sample value.
            </summary>
        </member>
        <member name="P:IO.Interfaces.ADC.Sample.resolution">
            <summary>
            Read-only property returning the number of bits of resolution.
            </summary>
        </member>
        <member name="T:IO.Interfaces.ADC.Voltage">
            <summary>
            Abstract interface for ADC inputs returning a floating point voltage
            value.
            </summary>
        </member>
        <member name="P:IO.Interfaces.ADC.Voltage.voltage">
            <summary>
            Read-only property returning a floating point analog voltage value.
            </summary>
        </member>
        <member name="T:IO.Interfaces.ADC.Input">
            <summary>
            Encapsulates ADC voltage inputs.
            </summary>
        </member>
        <member name="M:IO.Interfaces.ADC.Input.#ctor(IO.Interfaces.ADC.Sample,System.Double,System.Double)">
            <summary>
            Create an ADC voltage input.
            </summary>
            <param name="input">ADC sample object.</param>
            <param name="reference">ADC reference in volts.</param>
            <param name="gain">ADC input gain in volts per volt.</param>
        </member>
        <member name="P:IO.Interfaces.ADC.Input.voltage">
            <summary>
            Read-only property returning the analog input voltage.
            </summary>
        </member>
        <member name="T:IO.Interfaces.DAC.Sample">
            <summary>
            Abstract interface for DAC outputs accepting an integer output sample
            value.
            </summary>
        </member>
        <member name="P:IO.Interfaces.DAC.Sample.sample">
            <summary>
            Write-only property for setting the DAC output level.
            </summary>
        </member>
        <member name="P:IO.Interfaces.DAC.Sample.resolution">
            <summary>
            Read-only property returning the number of bits of resolution.
            </summary>
        </member>
        <member name="T:IO.Interfaces.DAC.Voltage">
            <summary>
            Abstract interface for DAC outputs accepting a floating point
            output voltage value.
            </summary>
        </member>
        <member name="P:IO.Interfaces.DAC.Voltage.voltage">
            <summary>
            Write-only property for setting the DAC output voltage.
            </summary>
        </member>
        <member name="T:IO.Interfaces.DAC.Output">
            <summary>
            Encapsulates DAC voltage outputs.
            </summary>
        </member>
        <member name="M:IO.Interfaces.DAC.Output.#ctor(IO.Interfaces.DAC.Sample,System.Double,System.Double)">
            <summary>
            Create an DAC voltage output.
            </summary>
            <param name="output">DAC output object.</param>
            <param name="reference">DAC output reference in volts.</param>
            <param name="gain">DAC output gain in volts per volt.</param>
        </member>
        <member name="P:IO.Interfaces.DAC.Output.voltage">
            <summary>
            Write-only for setting the DAC output voltage.
            </summary>
        </member>
        <member name="T:IO.Interfaces.GPIO.Pin">
            <summary>
            Abstract interface for GPIO pins.
            </summary>
        </member>
        <member name="P:IO.Interfaces.GPIO.Pin.state">
            <summary>
            Read/Write GPIO state property.
            </summary>
        </member>
        <member name="T:IO.Interfaces.GPIO.Direction">
            <summary>
            GPIO pin data direction settings.
            </summary>
        </member>
        <member name="F:IO.Interfaces.GPIO.Direction.Input">
            <summary>
            Input pin (read only)
            </summary>
        </member>
        <member name="F:IO.Interfaces.GPIO.Direction.Output">
            <summary>
            Output pin (read or write)
            </summary>
        </member>
        <member name="T:IO.Interfaces.I2C.Speeds">
            <summary>
            I<sup>2</sup>C bus speed constants.
            </summary>
        </member>
        <member name="F:IO.Interfaces.I2C.Speeds.StandardMode">
            <summary>
            Standard Mode
            </summary>
        </member>
        <member name="F:IO.Interfaces.I2C.Speeds.FastMode">
            <summary>
            Fast Mode
            </summary>
        </member>
        <member name="F:IO.Interfaces.I2C.Speeds.FastModePlus">
            <summary>
            Fast Mode Plus
            </summary>
        </member>
        <member name="T:IO.Interfaces.I2C.Bus">
            <summary>
            Abstract interface for I<sup>2</sup>C bus controllers.
            </summary>
        </member>
        <member name="M:IO.Interfaces.I2C.Bus.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Read bytes from an I<sup>2</sup>C slave device.
            </summary>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="M:IO.Interfaces.I2C.Bus.Write(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write bytes to an I<sup>2</sup>C slave device.
            </summary>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
        </member>
        <member name="M:IO.Interfaces.I2C.Bus.Transaction(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write and read bytes to and from an I<sup>2</sup>C slave device.
            </summary>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
            <param name="delayus">Delay in microseconds between the I<sup>2</sup>C
            write and read cycles.  Allowed values are 0 to 65535 microseconds.</param>
        </member>
        <member name="T:IO.Interfaces.I2C.Device">
            <summary>
            Encapsulates a single I<sup>2</sup>C slave device.
            </summary>
        </member>
        <member name="M:IO.Interfaces.I2C.Device.#ctor(IO.Interfaces.I2C.Bus,System.Int32)">
            <summary>
            Create an I<sup>2</sup>C slave device.
            </summary>
            <param name="bus">I<sup>2</sup>C bus controller object.</param>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
        </member>
        <member name="M:IO.Interfaces.I2C.Device.Read(System.Byte[],System.Int32)">
            <summary>
            Read bytes from an I<sup>2</sup>C slave device.
            </summary>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="M:IO.Interfaces.I2C.Device.Write(System.Byte[],System.Int32)">
            <summary>
            Write bytes to an I<sup>2</sup>C slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
        </member>
        <member name="M:IO.Interfaces.I2C.Device.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write and read bytes to and from an I<sup>2</sup>C slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
            <param name="delayus">Delay in microseconds between the I<sup>2</sup>C
            write and read cycles.  Allowed values are 0 to 65535 microseconds.</param>
        </member>
        <member name="T:IO.Interfaces.Message64.Message">
            <summary>
            Encapsulates 64-byte messages.
            </summary>
        </member>
        <member name="F:IO.Interfaces.Message64.Message.Size">
            <summary>
            Message payload size.
            </summary>
        </member>
        <member name="F:IO.Interfaces.Message64.Message.payload">
            <summary>
            Message payload.
            </summary>
        </member>
        <member name="M:IO.Interfaces.Message64.Message.#ctor">
            <summary>
            Create a message object without initializing the payload.
            </summary>
        </member>
        <member name="M:IO.Interfaces.Message64.Message.#ctor(System.Byte)">
            <summary>
            Create a message object with an initialized payload.
            </summary>
            <param name="fill">Value to initialize the payload with.</param>
        </member>
        <member name="T:IO.Interfaces.Message64.Messenger">
            <summary>
            Abstract interface for sending and receiving 64-byte messages.
            </summary>
        </member>
        <member name="M:IO.Interfaces.Message64.Messenger.Send(IO.Interfaces.Message64.Message)">
            <summary>
            Send a 64-byte message.
            </summary>
            <param name="cmd">Message to be sent.</param>
        </member>
        <member name="M:IO.Interfaces.Message64.Messenger.Receive(IO.Interfaces.Message64.Message)">
            <summary>
            Receive a 64-byte message.
            </summary>
            <param name="resp">Message received.</param>
        </member>
        <member name="M:IO.Interfaces.Message64.Messenger.Transaction(IO.Interfaces.Message64.Message,IO.Interfaces.Message64.Message)">
            <summary>
            Send a 64-byte command and receive a 64-byte response.
            </summary>
            <param name="cmd">Command to be sent.</param>
            <param name="resp">Response to be received.</param>
        </member>
        <member name="T:IO.Interfaces.Motor.Velocities">
            <summary>
            Motor velocity contants.
            </summary>
        </member>
        <member name="F:IO.Interfaces.Motor.Velocities.Minimum">
            <summary>
            Minimum velocity (full speed reverse).
            </summary>
        </member>
        <member name="F:IO.Interfaces.Motor.Velocities.Stop">
            <summary>
            Zero velocity (motor stopped).
            </summary>
        </member>
        <member name="F:IO.Interfaces.Motor.Velocities.Maximum">
            <summary>
            Maximum velocity (full speed forward).
            </summary>
        </member>
        <member name="T:IO.Interfaces.Motor.Output">
            <summary>
             Abstract interface for variable speed motor outputs.
            </summary>
        </member>
        <member name="P:IO.Interfaces.Motor.Output.velocity">
            <summary>
            Write-only motor velocity property.
            </summary>
        </member>
        <member name="T:IO.Interfaces.PWM.DutyCycles">
            <summary>
            PWM dutycycle contants.
            </summary>
        </member>
        <member name="F:IO.Interfaces.PWM.DutyCycles.Minimum">
            <summary>
            Minimum duty cycle (percent).
            </summary>
        </member>
        <member name="F:IO.Interfaces.PWM.DutyCycles.Maximum">
            <summary>
            Maximum duty cycle (percent).
            </summary>
        </member>
        <member name="T:IO.Interfaces.PWM.Output">
            <summary>
             Abstract interface for PWM outputs.
            </summary>
        </member>
        <member name="P:IO.Interfaces.PWM.Output.dutycycle">
            <summary>
            Write-only PWM duty cycle property.
            </summary>
        </member>
        <member name="T:IO.Interfaces.Servo.Positions">
            <summary>
            Servo position contants.
            </summary>
        </member>
        <member name="F:IO.Interfaces.Servo.Positions.Minimum">
            <summary>
            Minimum displacement position.
            </summary>
        </member>
        <member name="F:IO.Interfaces.Servo.Positions.Neutral">
            <summary>
            Zero displacement (neutral) position.
            </summary>
        </member>
        <member name="F:IO.Interfaces.Servo.Positions.Maximum">
            <summary>
            Maximum displacement position.
            </summary>
        </member>
        <member name="T:IO.Interfaces.Servo.Output">
            <summary>
             Abstract interface for servo outputs.
            </summary>
        </member>
        <member name="P:IO.Interfaces.Servo.Output.position">
            <summary>
            Write-only servo position property.
            </summary>
        </member>
        <member name="T:IO.Interfaces.SPI.Device">
            <summary>
            Abstract interface for SPI slave devices.
            </summary>
        </member>
        <member name="M:IO.Interfaces.SPI.Device.Read(System.Byte[],System.Int32)">
            <summary>
            Read bytes from an SPI slave device.
            </summary>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="M:IO.Interfaces.SPI.Device.Write(System.Byte[],System.Int32)">
            <summary>
            Write bytes to an SPI slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
        </member>
        <member name="M:IO.Interfaces.SPI.Device.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write bytes to and read bytes from an SPI slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
            <param name="delayus">Delay in microseconds between write and read
            operations.</param>
        </member>
        <member name="T:IO.Interfaces.Watchdog.Timer">
            <summary>
            Abstract interface for watchdog timers.
            </summary>
        </member>
        <member name="M:IO.Interfaces.Watchdog.Timer.Kick">
            <summary>
            Reset the watchdog timer.
            </summary>
        </member>
        <member name="P:IO.Interfaces.Watchdog.Timer.timeout">
            <summary>
            Read/Write watchdog timer period property.
            </summary>
        </member>
        <member name="T:IO.Remote.Device">
            <summary>
            Encasulates a remote I/O device.
            </summary>
        </member>
        <member name="M:IO.Remote.Device.ADC_Available">
            <summary>
            Query available A/D inputs.
            </summary>
            <returns>List of available A/D input numbers.</returns>
        </member>
        <member name="M:IO.Remote.Device.ADC_Create(System.Int32)">
            <summary>
            Create a remote A/D input.
            </summary>
            <param name="num">A/D input number: 0 to 127.</param>
            <returns>A/D input object.</returns>
        </member>
        <member name="F:IO.Remote.Device.MAX_CHANNELS">
            <summary>
            Maximum number of channels each subsystem can support.
            </summary>
        </member>
        <member name="M:IO.Remote.Device.#ctor(IO.Interfaces.Message64.Messenger)">
            <summary>
            Create a Remote I/O device object.
            </summary>
            <param name="m">Message transport object</param>
        </member>
        <member name="M:IO.Remote.Device.Dispatcher(IO.Interfaces.Message64.Message,IO.Interfaces.Message64.Message)">
            <summary>
            Command dispatcher.
            </summary>
            <param name="cmd">Command to be sent.</param>
            <param name="resp">Response to be received.</param>
        </member>
        <member name="P:IO.Remote.Device.Version">
            <summary>
            Version string from the Remote I/O device.
            </summary>
        </member>
        <member name="P:IO.Remote.Device.Capabilities">
            <summary>
            Capability string from the Remote I/O device.
            </summary>
        </member>
        <member name="M:IO.Remote.Device.GPIO_Available">
            <summary>
            Query available GPIO pins.
            </summary>
            <returns>List of available GPIO pin numbers.</returns>
        </member>
        <member name="M:IO.Remote.Device.GPIO_Create(System.Int32,IO.Interfaces.GPIO.Direction,System.Boolean)">
            <summary>
            Create a remote GPIO pin object.
            </summary>
            <param name="num">GPIO pin number: 0 to 127.</param>
            <param name="dir">GPIO pin data direction: Input or Output.</param>
            <param name="state">GPIO pin initial output state: true or false.  Ignored for input pins.</param>
            <returns>GPIO pin object.</returns>
        </member>
        <member name="M:IO.Remote.Device.I2C_Available">
            <summary>
            Query available I<sup>2</sup>C buses.
            </summary>
            <returns>List of available I<sup>2</sup>C bus numbers.</returns>
        </member>
        <member name="M:IO.Remote.Device.I2C_Create(System.Int32,System.Int32)">
            <summary>
            Create a remote I<sup>2</sup>C bus controller.
            </summary>
            <param name="num">I<sup>2</sup>C bus number: 0 to 127.</param>
            <param name="speed">I<sup>2</sup>C bus clock frequency in Hz</param>
            <returns>I<sup>2</sup>C bus controller object.</returns>
        </member>
        <member name="M:IO.Remote.Device.SPI_Available">
            <summary>
            Query available SPI slave devices.
            </summary>
            <returns>List of available SPI slave device numbers.</returns>
        </member>
        <member name="M:IO.Remote.Device.SPI_Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a remote SPI slave device.
            </summary>
            <param name="num">SPI slave device number: 0 to 127.</param>
            <param name="mode">SPI transfer mode: 0 to 3.</param>
            <param name="wordsize">SPI transfer word size: 8, 16, or 32.</param>
            <param name="speed">SPI transfer speed in bits per second.</param>
            <returns>SPI slave device object.</returns>
            <remarks><para>The actual SPI transfer rate will be the highest
            realizable rate that does not exceed the value specified in
            <c>speed</c>.</para></remarks>
        </member>
        <member name="T:IO.Remote.ADC">
            <summary>
            Encapsulates remote A/D inputs.
            </summary>
        </member>
        <member name="M:IO.Remote.ADC.#ctor(IO.Remote.Device,System.Int32)">
            <summary>
            Create a remote A/D input.
            </summary>
            <param name="dev">Remote I/O device object.</param>
            <param name="num">A/D input number: 0 to 127.</param>
            <remarks>Use <c>Device.ADC_Create()</c> instead of this constructor.</remarks>
        </member>
        <member name="P:IO.Remote.ADC.sample">
            <summary>
            Read-only property returning an integer analog input sample.
            </summary>
        </member>
        <member name="P:IO.Remote.ADC.resolution">
            <summary>
            Read-only property returning the number of bits of resolution.
            </summary>
        </member>
        <member name="T:IO.Remote.PeripheralTypes">
            <summary>
            Types of remote peripherals
            </summary>
        </member>
        <member name="F:IO.Remote.PeripheralTypes.ADC">
            <summary>
            A/D peripherals
            </summary>
        </member>
        <member name="F:IO.Remote.PeripheralTypes.GPIO">
            <summary>
            GPIO pins
            </summary>
        </member>
        <member name="F:IO.Remote.PeripheralTypes.I2C">
            <summary>
            I<sup>2</sup>C bus controllers
            </summary>
        </member>
        <member name="F:IO.Remote.PeripheralTypes.SPI">
            <summary>
            SPI slave devices
            </summary>
        </member>
        <member name="T:IO.Remote.GPIO">
            <summary>
            Encapsulates remote GPIO pins.
            </summary>
        </member>
        <member name="M:IO.Remote.GPIO.#ctor(IO.Remote.Device,System.Int32,IO.Interfaces.GPIO.Direction,System.Boolean)">
            <summary>
            Create a remote GPIO pin.
            </summary>
            <param name="dev">Remote I/O device object.</param>
            <param name="num">GPIO pin number: 0 to 127.</param>
            <param name="dir">GPIO pin data direction: Input or Output.</param>
            <param name="state">GPIO pin initial output state: true or false.  Ignored for input pins.</param>
            <remarks>Use <c>Device.GPIO_Create()</c> instead of this constructor.</remarks>
        </member>
        <member name="P:IO.Remote.GPIO.state">
            <summary>
            Read/Write GPIO state property.
            </summary>
        </member>
        <member name="T:IO.Remote.I2C">
            <summary>
            Encapsulates remote I<sup>2</sup>C buses.
            </summary>
        </member>
        <member name="M:IO.Remote.I2C.#ctor(IO.Remote.Device,System.Int32,System.Int32)">
            <summary>
            Create a remote I<sup>2</sup>C bus controller.
            </summary>
            <param name="dev">Remote I/O device object.</param>
            <param name="num">I<sup>2</sup>C bus number: 0 to 127.</param>
            <param name="speed">I<sup>2</sup>C bus clock frequency in Hz</param>
            <remarks>Use <c>Device.I2C_Create()</c> instead of this constructor.</remarks>
        </member>
        <member name="M:IO.Remote.I2C.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Read bytes from an I<sup>2</sup>C slave device.
            </summary>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
        </member>
        <member name="M:IO.Remote.I2C.Write(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write bytes to an I<sup>2</sup>C slave device.
            </summary>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
        </member>
        <member name="M:IO.Remote.I2C.Transaction(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write and read bytes to and from an I<sup>2</sup>C slave device.
            </summary>
            <param name="slaveaddr">I<sup>2</sup>C slave address.</param>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read.</param>
            <param name="delayus">Delay in microseconds between the I<sup>2</sup>C
            write and read cycles.  Allowed values are 0 to 65535 microseconds.</param>
        </member>
        <member name="T:IO.Remote.MessageTypes">
            <summary>
            Remote I/O protocol message types
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.LOOPBACK_REQUEST">
            <summary>
            Loopback request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.LOOPBACK_RESPONSE">
            <summary>
            Loopback response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.VERSION_REQUEST">
            <summary>
            Version string request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.VERSION_RESPONSE">
            <summary>
            Version string response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.CAPABILITY_REQUEST">
            <summary>
            Capability string request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.CAPABILITY_RESPONSE">
            <summary>
            Capability string response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_PRESENT_REQUEST">
            <summary>
            GPIO pins available request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_PRESENT_RESPONSE">
            <summary>
            GPIO pins available response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_CONFIGURE_REQUEST">
            <summary>
            GPIO pins configure request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_CONFIGURE_RESPONSE">
            <summary>
            GPIO pins configure response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_READ_REQUEST">
            <summary>
            GPIO pins read request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_READ_RESPONSE">
            <summary>
            GPIO pins read response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_WRITE_REQUEST">
            <summary>
            GPIO pins write request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.GPIO_WRITE_RESPONSE">
            <summary>
            GPIO pins write response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.I2C_PRESENT_REQUEST">
            <summary>
            I<sup>2</sup>C buses available request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.I2C_PRESENT_RESPONSE">
            <summary>
            I<sup>2</sup>C buses available response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.I2C_CONFIGURE_REQUEST">
            <summary>
            I<sup>2</sup>C bus configure request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.I2C_CONFIGURE_RESPONSE">
            <summary>
            I<sup>2</sup>C bus configure response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.I2C_TRANSACTION_REQUEST">
            <summary>
            I<sup>2</sup>C bus transaction request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.I2C_TRANSACTION_RESPONSE">
            <summary>
            I<sup>2</sup>C bus transaction response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.SPI_PRESENT_REQUEST">
            <summary>
             SPI slave devices available request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.SPI_PRESENT_RESPONSE">
            <summary>
            SPI slave devices available response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.SPI_CONFIGURE_REQUEST">
            <summary>
            SPI slave device configure request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.SPI_CONFIGURE_RESPONSE">
            <summary>
             SPI slave device configure response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.SPI_TRANSACTION_REQUEST">
            <summary>
             SPI bus transaction request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.SPI_TRANSACTION_RESPONSE">
            <summary>
             SPI bus transaction response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.ADC_PRESENT_REQUEST">
            <summary>
            ADC inputs available request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.ADC_PRESENT_RESPONSE">
            <summary>
            ADC inputs available response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.ADC_CONFIGURE_REQUEST">
            <summary>
            ADC input configure request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.ADC_CONFIGURE_RESPONSE">
            <summary>
            ADC input configure response
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.ADC_READ_REQUEST">
            <summary>
            ADC input read request
            </summary>
        </member>
        <member name="F:IO.Remote.MessageTypes.ADC_READ_RESPONSE">
            <summary>
            ADC input read response
            </summary>
        </member>
        <member name="T:IO.Remote.SPI">
            <summary>
            Encapsulates remote SPI slave devices.
            </summary>
        </member>
        <member name="M:IO.Remote.SPI.#ctor(IO.Remote.Device,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a remote SPI slave device.
            </summary>
            <param name="dev">Remote I/O device object.</param>
            <param name="num">SPI slave device number: 0 to 127.</param>
            <param name="mode">SPI transfer mode: 0 to 3.</param>
            <param name="wordsize">SPI transfer word size: 8, 16, or 32.</param>
            <param name="speed">SPI transfer speed in bits per second.</param>
            <remarks><para>Use <c>Device.SPI_Create()</c> instead of this
            constructor.</para>
            <para>The actual SPI transfer rate will be the highest realizable
            rate that does not exceed the value specified in <c>speed</c>.
            </para></remarks>
        </member>
        <member name="M:IO.Remote.SPI.Read(System.Byte[],System.Int32)">
            <summary>
            Read bytes from an SPI slave device.
            </summary>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read: 1 to 60.</param>
        </member>
        <member name="M:IO.Remote.SPI.Write(System.Byte[],System.Int32)">
            <summary>
            Write bytes to an SPI slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write: 1 to 57.</param>
        </member>
        <member name="M:IO.Remote.SPI.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write and read bytes to and from an SPI slave device.
            </summary>
            <param name="cmd">Command buffer.</param>
            <param name="cmdlen">Number of bytes to write: 0 to 57.</param>
            <param name="delayus">Delay in microseconds between write and read
            operations: 0 to 65535.</param>
            <param name="resp">Response buffer.</param>
            <param name="resplen">Number of bytes to read: 0 to 60.</param>
        </member>
        <member name="T:SPIAgent.Transport_libspiagent">
            <summary>
            SPIAgent transport implementation using <c>libspiagent.so</c> to
            communicate with the LPC1114 I/O Processor.
            </summary>
        </member>
        <member name="M:SPIAgent.Transport_libspiagent.#ctor(System.String)">
            <summary>
            Constructor for an SPIAgent transport object.
            </summary>
            <param name="servername">Server name.</param>
        </member>
        <member name="M:SPIAgent.Transport_libspiagent.Finalize">
            <summary>
            Finalizer for an SPIAgent transport object.
            </summary>
        </member>
        <member name="M:SPIAgent.Transport_libspiagent.Command(SPIAgent.SPIAGENT_COMMAND_MSG_t,SPIAgent.SPIAGENT_RESPONSE_MSG_t@)">
            <summary>
            Issue a command to and receive a response from the LPC1114 I/O
            Processor.
            </summary>
            <param name="cmd">Command message object.</param>
            <param name="resp">Response message object.</param>
        </member>
        <member name="T:SPIAgent.ADC">
            <summary>
            The ADC (Analog to Digital Converter) class implements LPC1114 analog input services.
            </summary>
        </member>
        <member name="F:SPIAgent.ADC.LPC1114_ADC_SPAN">
            <summary>
            The analog input range is 0.0 to 3.3 volts.
            </summary>
        </member>
        <member name="F:SPIAgent.ADC.LPC1114_ADC_BITS">
            <summary>
            The analog input resolution is 10 bits.
            </summary>
        </member>
        <member name="F:SPIAgent.ADC.LPC1114_ADC_STEPS">
            <summary>
            There are 1024 discrete analog input levels.
            </summary>
        </member>
        <member name="F:SPIAgent.ADC.LPC1114_ADC_STEPSIZE">
            <summary>
            The analog input level steps are 3.22 millivolts per step.
            </summary>
        </member>
        <member name="M:SPIAgent.ADC.#ctor(SPIAgent.ITransport,System.Int32)">
            <summary>
            LPC1114 analog input object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pin">LPC1114 analog input pin number.  LPC1114_AD1 through LPC1114_AD5 are allowed.</param>
        </member>
        <member name="P:SPIAgent.ADC.sample">
            <summary>
            This read-only property returns the LPC1114 analog input sample (0 to 1023).
            </summary>
        </member>
        <member name="P:SPIAgent.ADC.resolution">
            <summary>
            This read-only property returns the LPC1114 A/D converter resolution
            int bits.
            </summary>
        </member>
        <member name="P:SPIAgent.ADC.voltage">
            <summary>
            This read-only property returns the LPC1114 analog input voltage (0.0 to 3.3 volts).
            </summary>
        </member>
        <member name="T:SPIAgent.Commands">
            <summary>
            Raspberry Pi LPC1114 I/O Processor Expansion Board SPI Agent Firmware commands
            </summary>
        </member>
        <member name="T:SPIAgent.errno">
            <summary>
            These are well-known errno values that seem to be standard among BSD,
            Linux, and other Unix derivatives
            </summary>
        </member>
        <member name="T:SPIAgent.SPIAgent_Transport_Exception">
            <summary>
            This exception is raised upon detection of a Raspberry Pi LPC1114 I/O Processor Expansion Board SPI Agent Firmware transport failure.
            </summary>
        </member>
        <member name="M:SPIAgent.SPIAgent_Transport_Exception.#ctor">
            <summary>
            Default parameterless constructor
            </summary>
        </member>
        <member name="M:SPIAgent.SPIAgent_Transport_Exception.#ctor(System.String)">
            <summary>
            Constructor including an error message string
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:SPIAgent.SPIAgent_Transport_Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor including an error message string and an inner exception
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:SPIAgent.SPIAgent_Exception">
            <summary>
            This exception is raised upon detection of a Raspberry Pi LPC1114 I/O Processor Expansion Board SPI Agent Firmware error.
            </summary>
        </member>
        <member name="M:SPIAgent.SPIAgent_Exception.#ctor">
            <summary>
            Default parameterless constructor
            </summary>
        </member>
        <member name="M:SPIAgent.SPIAgent_Exception.#ctor(System.String)">
            <summary>
            Constructor including an error message string
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:SPIAgent.SPIAgent_Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor including an error message string and an inner exception
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:SPIAgent.GPIO">
            <summary>
            The GPIO (General Purpose Input Output) class implements LPC1114 digital input/output services.
            </summary>
        </member>
        <member name="T:SPIAgent.GPIO.DIRECTION">
            <summary>
            LPC1114 GPIO pin data directions.
            </summary>
        </member>
        <member name="T:SPIAgent.GPIO.MODE">
            <summary>
            LPC1114 GPIO pin configuration modes.
            </summary>
        </member>
        <member name="T:SPIAgent.GPIO.INTERRUPT">
            <summary>
            LPC1114 GPIO pin interrupt modes.
            </summary>
        </member>
        <member name="M:SPIAgent.GPIO.#cctor">
            <summary>
            Static constructor that populates the valid pins table.
            </summary>
        </member>
        <member name="M:SPIAgent.GPIO.#ctor(SPIAgent.ITransport,System.Int32,SPIAgent.GPIO.DIRECTION,System.Boolean)">
            <summary>
            Constructor that configures a GPIO pin, given pin number, data direction, and initial state.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pin">LPC1114 GPIO pin number.
            LPC1114_GPIO0 through LPC1114_GPIO7 are allowed.</param>
            <param name="dir">LPC1114 GPIO pin data direction.</param>
            <param name="state">LPC1114 GPIO pin initial state.
            For an output pin, sets output state to sourcing (1) or sinking (0).
            For an input pin, sets internal pull-up resistor (1) or pull-down resistor (0).</param>
        </member>
        <member name="M:SPIAgent.GPIO.#ctor(SPIAgent.ITransport,System.Int32,SPIAgent.GPIO.MODE)">
            <summary>
            Constructor that configures a GPIO pin, given pin number and mode.
            Use this constructor if you need to configure a high-impedance input or an open-drain output.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pin">LPC1114 GPIO pin number.
            LPC1114_GPIO0 through LPC1114_GPIO7 are allowed.</param>
            <param name="mode">LPC1114 GPIO pin mode.</param>
        </member>
        <member name="M:SPIAgent.GPIO.ConfigureMode(SPIAgent.GPIO.MODE)">
            <summary>
            Configure this GPIO pin's mode.
            </summary>
            <param name="mode">LPC1114 GPIO pin mode.</param>
        </member>
        <member name="M:SPIAgent.GPIO.ConfigureInterrupt(SPIAgent.GPIO.INTERRUPT)">
            <summary>
            Configure this GPIO pin's interrupt mode.
            This only makes sense when running on the Raspberry Pi.
            </summary>
            <param name="intconfig">LPC1114 GPIO pin interrupt mode.</param>
        </member>
        <member name="P:SPIAgent.GPIO.state">
            <summary>
            This property gets or sets this LPC1114 GPIO pin's state.
            </summary>
        </member>
        <member name="T:SPIAgent.ITransport">
            <summary>
            Abstract interface for SPIAgent transport mechanisms.
            </summary>
        </member>
        <member name="M:SPIAgent.ITransport.Command(SPIAgent.SPIAGENT_COMMAND_MSG_t,SPIAgent.SPIAGENT_RESPONSE_MSG_t@)">
            <summary>
            Issue a command to and receive a response from the LPC1114 I/O
            Processor.
            </summary>
            <param name="cmd">Command message object.</param>
            <param name="resp">Response message object.</param>
        </member>
        <member name="T:SPIAgent.LEGORC">
            <summary>
            The LEGORC class implements LEGO(R) Power Functions Remote Control Services.
            </summary>
        </member>
        <member name="F:SPIAgent.LEGORC.MIN_CHANNEL">
            <summary>
            The range of LEGO(R) Power Functions Remote Control channels is 1 to 4.
            </summary>
        </member>
        <member name="F:SPIAgent.LEGORC.MAX_CHANNEL">
            <summary>
            The range of LEGO(R) Power Functions Remote Control channels is 1 to 4.
            </summary>
        </member>
        <member name="F:SPIAgent.LEGORC.MIN_SPEED">
            <summary>
            The range of LEGO(R) Power Functions Remote Control speed values is 0 to 255.
            Some motor selections impose even smaller speed ranges.
            </summary>
        </member>
        <member name="F:SPIAgent.LEGORC.MAX_SPEED">
            <summary>
            The range of LEGO(R) Power Functions Remote Control speed values is 0 to 255.
            Some motor selections impose even smaller speed ranges.
            </summary>
        </member>
        <member name="T:SPIAgent.LEGORC.MOTOR">
            <summary>
            LEGO(R) Power Functions Remote Control moter identifiers.
            </summary>
        </member>
        <member name="T:SPIAgent.LEGORC.DIRECTION">
            <summary>
            LEGO(R) Power Functions Remote Control moter direction identifiers.
            </summary>
        </member>
        <member name="M:SPIAgent.LEGORC.#ctor(SPIAgent.ITransport,System.Int32)">
            <summary>
            LEGO(R) Power Functions Remote Control output object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pin">LPC1114 GPIO pin number.
            LPC1114_GPIO0 through LPC1114_GPIO7 are allowed.</param>
        </member>
        <member name="M:SPIAgent.LEGORC.Command(System.Int32,SPIAgent.LEGORC.MOTOR,SPIAgent.LEGORC.DIRECTION,System.Int32)">
            <summary>
            Issue a LEGO(R) Power Functions Remote Control command.
            </summary>
            <param name="c">Channel number.</param>
            <param name="m">Motor identifier.</param>
            <param name="d">Direction identifier.</param>
            <param name="s">Speed.</param>
        </member>
        <member name="T:SPIAgent.MessageConversions">
            <exclude/>
        </member>
        <member name="T:SPIAgent.SPIAGENT_COMMAND_MSG_t">
            <summary>
            Raspberry Pi LPC1114 I/O Processor Expansion Board SPI Agent Firmware
            command message object.
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_COMMAND_MSG_t.command">
            <summary>
            Command code to SPI Agent Firmware
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_COMMAND_MSG_t.pin">
            <summary>
            Pin number to SPI Agent Firmware
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_COMMAND_MSG_t.data">
            <summary>
            Data item to SPI Agent Firmware
            </summary>
        </member>
        <member name="M:SPIAgent.SPIAGENT_COMMAND_MSG_t.ToBytes(System.Byte[]@)">
            <summary>
            Convert a command message object to a byte array.
            </summary>
            <param name="buf">Destination byte array.  Must be at least
            12 bytes long.</param>
        </member>
        <member name="M:SPIAgent.SPIAGENT_COMMAND_MSG_t.FromBytes(System.Byte[]@)">
            <summary>
            Convert a command message object from a byte array.
            </summary>
            <param name="buf">Source byte array.  Must be at least
            12 bytes long.</param>
        </member>
        <member name="T:SPIAgent.SPIAGENT_RESPONSE_MSG_t">
            <summary>
            Raspberry Pi LPC1114 I/O Processor Expansion Board SPI Agent Firmware
            response message object.
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_RESPONSE_MSG_t.command">
            <summary>
            Command code from SPI Agent Firmware (echoed from command message)
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_RESPONSE_MSG_t.pin">
            <summary>
            Pin number from SPI Agent Firmware (echoed from command message)
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_RESPONSE_MSG_t.data">
            <summary>
            Data item from SPI Agent Firmware
            </summary>
        </member>
        <member name="F:SPIAgent.SPIAGENT_RESPONSE_MSG_t.error">
            <summary>
            Error code (errno value) from SPI Agent Firmware
            </summary>
        </member>
        <member name="M:SPIAgent.SPIAGENT_RESPONSE_MSG_t.ToBytes(System.Byte[]@)">
            <summary>
            Convert a response message object to a byte array.
            </summary>
            <param name="buf">Destination byte array.  Must be at least
            16 bytes long.</param>
        </member>
        <member name="M:SPIAgent.SPIAGENT_RESPONSE_MSG_t.FromBytes(System.Byte[]@)">
            <summary>
            Convert a response message object from a byte array.
            </summary>
            <param name="buf">Source byte array.  Must be at least
            12 bytes long.</param>
        </member>
        <member name="T:SPIAgent.Pins">
            <summary>
            These are the LPC1114 I/O pins available for use on the Raspberry Pi LPC1114 I/O Processor Expansion Board.
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_INT">
            <summary>
            Interrupt output to Raspberry Pi
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_LED">
            <summary>
            On board LED
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO0">
            <summary>
            GPIO0 aka LPC1114 PIO1_0
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO1">
            <summary>
            GPIO1 aka LPC1114 PIO1_1
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO2">
            <summary>
            GPIO2 aka LPC1114 PIO1_2
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO3">
            <summary>
            GPIO3 aka LPC1114 PIO1_3
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO4">
            <summary>
            GPIO4 aka LPC1114 PIO1_4
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO5">
            <summary>
            GPIO5 aka LPC1114 PIO1_5
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO6">
            <summary>
            GPIO6 aka LPC1114 PIO1_8
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_GPIO7">
            <summary>
            GPIO7 aka LPC1114 PIO1_9
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_AD1">
            <summary>
            Analog input 1 aka GPIO0
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_AD2">
            <summary>
            Analog input 2 aka GPIO1
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_AD3">
            <summary>
            Analog input 3 aka GPIO2
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_AD4">
            <summary>
            Analog input 4 aka GPIO3
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_AD5">
            <summary>
            Analog input 5 aka GPIO4
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_PWM1">
            <summary>
            PWM output 1 aka GPIO1
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_PWM2">
            <summary>
            PWM output 2 aka GPIO2
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_PWM3">
            <summary>
            PWM output 3 aka GPIO3
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_PWM4">
            <summary>
            PWM output 4 aka GPIO7
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_CT32B1_CAP0">
            <summary>
            CT32B1 capture input 0 aka GPIO0
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_CT32B1_MAT0">
            <summary>
            CT32B1 match output 0 aka GPIO1
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_CT32B1_MAT1">
            <summary>
            CT32B1 match output 1 aka GPIO2
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_CT32B1_MAT2">
            <summary>
            CT32B1 match output 2 aka GPIO3
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_CT32B1_MAT3">
            <summary>
            CT32B1 match output 3 aka GPIO4
            </summary>
        </member>
        <member name="F:SPIAgent.Pins.LPC1114_CT32B0_CAP0">
            <summary>
            CT32B0 capture input 0 aka GPIO5
            </summary>
        </member>
        <member name="M:SPIAgent.Pins.IS_GPIO(System.Int32)">
            <summary>
            Validate GPIO pin
            </summary>
            <param name="pin">LPC1114 GPIO Pin Number</param>
            <returns><c>True</c> if the specified pin can be used as a GPIO pin</returns>
        </member>
        <member name="M:SPIAgent.Pins.IS_ANALOG(System.Int32)">
            <summary>
            Validate analog input pin
            </summary>
            <param name="pin">LPC1114 GPIO Pin Number</param>
            <returns><c>True</c> if the specified pin can be used as an analog input</returns>
        </member>
        <member name="M:SPIAgent.Pins.IS_PWM(System.Int32)">
            <summary>
            Validate PWM output pin
            </summary>
            <param name="pin">LPC1114 GPIO Pin Number</param>
            <returns><c>True</c> if the specified pin can be used as a PWM output</returns>
        </member>
        <member name="T:SPIAgent.PWM">
            <summary>
            The PWM (Pulse With Modulation) class implements LPC1114 PWM output services.
            </summary>
        </member>
        <member name="F:SPIAgent.PWM.MIN_CHANNELS">
            <summary>
            The number of available PWM output channels.
            </summary>
        </member>
        <member name="F:SPIAgent.PWM.MIN_FREQUENCY">
            <summary>
            The minimum allowed PWM frequency is 50 Hz.
            </summary>
        </member>
        <member name="F:SPIAgent.PWM.MAX_FREQUENCY">
            <summary>
            The maximum allowed PWM frequency is 50,000 Hz.
            </summary>
        </member>
        <member name="F:SPIAgent.PWM.MIN_DUTYCYCLE">
            <summary>
            The minimum allowed PWM duty cycle is 0.0 percent.
            </summary>
        </member>
        <member name="F:SPIAgent.PWM.MAX_DUTYCYCLE">
            <summary>
            The maximum allowed PWM duty cycle is 100.0 percent.
            </summary>
        </member>
        <member name="M:SPIAgent.PWM.#ctor(SPIAgent.ITransport,System.Int32,System.Int32)">
            <summary>
            LPC1114 PWM output object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pin">LPC1114 PWM output pin number.
            Allowed values are LPC1114_PWM1 through LPC1114_PWM4.</param>
            <param name="frequency">PWM pulse frequency.
            Allowed values are 50 to 50000 Hz.</param>
        </member>
        <member name="P:SPIAgent.PWM.dutycycle">
            <summary>
            This write-only property sets this PWM output's duty cycle.
            Allowed values are 0.0 through 100.0 percent (from almost always off to almost always on).
            </summary>
        </member>
        <member name="T:SPIAgent.Servo">
            <summary>
            The Servo class implements LPC1114 RC servo output services.
            </summary>
        </member>
        <member name="F:SPIAgent.Servo.SERVO_MIN_POSITION">
            <summary>
            The minimum servo position is -1.0.
            </summary>
        </member>
        <member name="F:SPIAgent.Servo.SERVO_NEUTRAL_POSITION">
            <summary>
            The midpoint/neutral/null/zero servo position is 0.0.
            </summary>
        </member>
        <member name="F:SPIAgent.Servo.SERVO_MAX_POSITION">
            <summary>
            The maximum servo position is 1.0.
            </summary>
        </member>
        <member name="M:SPIAgent.Servo.#ctor(SPIAgent.ITransport,System.Int32,System.Int32)">
            <summary>
            LPC1114 RC servo output object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pin">LPC1114 PWM output pin number.
            Allowed values are LPC1114_PWM1 through LPC1114_PWM4.</param>
            <param name="frequency">PWM pulse frequency.
            Allowed values are 50 to 400 Hz.</param>
        </member>
        <member name="P:SPIAgent.Servo.position">
            <summary>
            This write-only property sets this servo output's position.
            Allowed values are -1.0 through 1.0 (normalized deflection from the null position).
            </summary>
        </member>
        <member name="T:SPIAgent.Motor">
            <summary>
            The Motor class implements LPC1114 H-bridge DC motor driver output services.
            </summary>
        </member>
        <member name="F:SPIAgent.Motor.MOTOR_MIN_SPEED">
            <summary>
            The motor speed minimum value is -1.0 (full reverse).
            </summary>
        </member>
        <member name="F:SPIAgent.Motor.MOTOR_STOP">
            <summary>
            The motor speed stop value is 0.0.
            </summary>
        </member>
        <member name="F:SPIAgent.Motor.MOTOR_MAX_SPEED">
            <summary>
            The motor speed maximum value is 1.0 (full forward).
            </summary>
        </member>
        <member name="M:SPIAgent.Motor.#ctor(SPIAgent.ITransport,System.Int32,System.Int32,System.Int32)">
            <summary>
            LPC1114 H-bridge DC motor driver output object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="pwm_pin">LPC1114 PWM output pin number.
            Allowed values are LPC1114_PWM1 through LPC1114_PWM4.</param>
            <param name="dir_pin">LPC1114 direction output pin number.
            Allowed values are LPC1114_GPIO0 through LPC1114_GPIO7.</param>
            <param name="frequency">PWM pulse frequency.
            Allowed values are 50 to 50000 Hz.</param>
        </member>
        <member name="P:SPIAgent.Motor.speed">
            <summary>
            This write-only property sets this motor speed.
            Allowed values are -1.0 through 1.0 (normalized speed).
            </summary>
        </member>
        <member name="T:SPIAgent.SFR">
            <summary>
            The SFR class implements LPC1114 Special Function Register services.
            Use only with great caution!
            </summary>
        </member>
        <member name="F:SPIAgent.SFR.LPC1114_DEVICE_ID">
            <summary>
            LPC1114 device ID register
            </summary>
        </member>
        <member name="F:SPIAgent.SFR.LPC1114_GPIO1DATA">
            <summary>
            LPC1114 GPIO1 port data register
            </summary>
        </member>
        <member name="F:SPIAgent.SFR.LPC1114_U0SCR">
            <summary>
            LPC1114 UART 0 scratchpad register
            </summary>
        </member>
        <member name="M:SPIAgent.SFR.#ctor(SPIAgent.ITransport,System.Int32)">
            <summary>
            LPC1114 SFR object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="address">32-bit SFR address.
            See the LPC111x/LPC11Cxx User manual UM10398 for register addresses and contents.
            Use only with great caution!</param>
        </member>
        <member name="P:SPIAgent.SFR.data">
            <summary>
            This property gets or sets the value of this Special Function Register.
            Use only with great caution!
            </summary>
        </member>
        <member name="T:SPIAgent.Timer">
            <summary>
            The Timer class implements LPC1114 32-bit hardware timer services.
            </summary>
        </member>
        <member name="F:SPIAgent.Timer.PCLK_FREQUENCY">
            <summary>
            The LPC1114 system clock frequency is 48 MHz.
            </summary>
        </member>
        <member name="T:SPIAgent.Timer.ID">
            <summary>
            LPC1114 32-bit timer identifiers.
            </summary>
        </member>
        <member name="T:SPIAgent.Timer.MODE">
            <summary>
            LPC1114 32-bit timer modes.
            </summary>
        </member>
        <member name="T:SPIAgent.Timer.CAPTURE_EDGE">
            <summary>
            LPC1114 32-bit timer capture modes.
            </summary>
        </member>
        <member name="T:SPIAgent.Timer.MATCH_REGISTER">
            <summary>
            LPC1114 32-bit timer match registers.
            </summary>
        </member>
        <member name="T:SPIAgent.Timer.MATCH_OUTPUT">
            <summary>
            LPC1114 32-bit timer match output actions.
            </summary>
        </member>
        <member name="T:SPIAgent.Timer.FEATURES">
            <summary>
            LPC1114 32-bit timer capture and match features.
            </summary>
        </member>
        <member name="M:SPIAgent.Timer.#ctor(SPIAgent.ITransport,SPIAgent.Timer.ID,SPIAgent.Timer.MODE,System.UInt32)">
            <summary>
            LPC1114 32-bit timer object constructor.
            </summary>
            <param name="spiagent">SPI Agent Firmware transport object.</param>
            <param name="timer">Timer identifier.</param>
            <param name="mode">Timer mode.  Default is MODE.DISABLED.</param>
            <param name="prescaler">Timer prescaler.  Default is 1.</param>
        </member>
        <member name="M:SPIAgent.Timer.ConfigureMode(SPIAgent.Timer.MODE)">
            <summary>
            Configure LPC1114 hardware timer mode.
            </summary>
            <param name="mode">Timer mode</param>
        </member>
        <member name="M:SPIAgent.Timer.ConfigurePrescaler(System.UInt32)">
            <summary>
            Configure LPC1114 32-bit timer prescaler.
            </summary>
            <param name="prescaler">Prescaler value.</param>
        </member>
        <member name="M:SPIAgent.Timer.ConfigureCapture(SPIAgent.Timer.CAPTURE_EDGE,SPIAgent.Timer.FEATURES)">
            <summary>
            Configure LPC1114 32-bit hardware timer capture mode.
            </summary>
            <param name="edge">CAP0 input edge.</param>
            <param name="features">Capture features.</param>
        </member>
        <member name="M:SPIAgent.Timer.ConfigureMatch(SPIAgent.Timer.MATCH_REGISTER,System.UInt32,SPIAgent.Timer.MATCH_OUTPUT,SPIAgent.Timer.FEATURES)">
            <summary>
            Configure LPC1114 match register.
            </summary>
            <param name="match">Match register identifier.</param>
            <param name="value">Match value.</param>
            <param name="action">Match output action.</param>
            <param name="features">Match features.</param>
        </member>
        <member name="P:SPIAgent.Timer.counter">
            <summary>
            This read-only property returns the LPC1114 32-bit timer counter register.
            </summary>
        </member>
        <member name="P:SPIAgent.Timer.capture">
            <summary>
            This read-only property returns the LPC1114 32-bit timer capture register.
            </summary>
        </member>
        <member name="P:SPIAgent.Timer.capture_delta">
            <summary>
            This read-only property returns the most recent LPC1114 32-bit timer capture delta value.
            </summary>
        </member>
        <member name="T:SPIAgent.Transport_I2C">
            <summary>
            SPIAgent transport implementation using I<sup>2</sup>C to
            communicate with the LPC1114 I/O Processor.
            </summary>
        </member>
        <member name="M:SPIAgent.Transport_I2C.#ctor(IO.Interfaces.I2C.Bus,System.Boolean)">
            <summary>
            Constructor for an SPIAgent transport object.
            </summary>
            <param name="bus">I<sup>2</sup>C bus controller instance.</param>
            <param name="clockstretch"><c>true</c> if the I<sup>2</sup>C bus
            controller supports clock stretching.</param>
        </member>
        <member name="M:SPIAgent.Transport_I2C.Command(SPIAgent.SPIAGENT_COMMAND_MSG_t,SPIAgent.SPIAGENT_RESPONSE_MSG_t@)">
            <summary>
            Issue a command to and receive a response from the LPC1114 I/O
            Processor.
            </summary>
            <param name="cmd">Command message object.</param>
            <param name="resp">Response message object.</param>
        </member>
        <member name="T:SPIAgent.Transport_SPI">
            <summary>
            SPIAgent transport implementation using SPI to communicate with the
            LPC1114 I/O Processor.
            </summary>
        </member>
        <member name="M:SPIAgent.Transport_SPI.#ctor(IO.Interfaces.SPI.Device)">
            <summary>
            Constructor for an SPIAgent transport object.
            </summary>
            <param name="dev">SPI device instance.</param>
        </member>
        <member name="M:SPIAgent.Transport_SPI.Command(SPIAgent.SPIAGENT_COMMAND_MSG_t,SPIAgent.SPIAGENT_RESPONSE_MSG_t@)">
            <summary>
            Issue a command to and receive a response from the LPC1114 I/O
            Processor.
            </summary>
            <param name="cmd">Command message object.</param>
            <param name="resp">Response message object.</param>
        </member>
        <member name="T:lpc11xx.Pins">
            <summary>
            These are the LPC1114 I/O pins.
            Not all of them are bonded out on any particular device.
            </summary>
        </member>
    </members>
</doc>
